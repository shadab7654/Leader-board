{"ast":null,"code":"var Mexp = require('./postfix.js');\nMexp.prototype.postfixEval = function (UserDefined) {\n  'use strict';\n\n  UserDefined = UserDefined || {};\n  UserDefined.PI = Math.PI;\n  UserDefined.E = Math.E;\n  var stack = [],\n    pop1,\n    pop2,\n    pop3;\n  var disp = [];\n  var temp = '';\n  var arr = this.value;\n  var bool = typeof UserDefined.n !== 'undefined';\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i].type === 1) {\n      stack.push({\n        value: arr[i].value,\n        type: 1\n      });\n    } else if (arr[i].type === 3) {\n      stack.push({\n        value: UserDefined[arr[i].value],\n        type: 1\n      });\n    } else if (arr[i].type === 0) {\n      if (typeof stack[stack.length - 1].type === 'undefined') {\n        stack[stack.length - 1].value.push(arr[i]);\n      } else stack[stack.length - 1].value = arr[i].value(stack[stack.length - 1].value);\n    } else if (arr[i].type === 7) {\n      if (typeof stack[stack.length - 1].type === 'undefined') {\n        stack[stack.length - 1].value.push(arr[i]);\n      } else stack[stack.length - 1].value = arr[i].value(stack[stack.length - 1].value);\n    } else if (arr[i].type === 8) {\n      var popped = [];\n      for (var x = 0; x < arr[i].numberOfArguments; x++) {\n        popped.push(stack.pop().value);\n      }\n      stack.push({\n        type: 1,\n        value: arr[i].value.apply(arr[i], popped.reverse())\n      });\n    } else if (arr[i].type === 10) {\n      pop1 = stack.pop();\n      pop2 = stack.pop();\n      if (typeof pop2.type === 'undefined') {\n        pop2.value = pop2.concat(pop1);\n        pop2.value.push(arr[i]);\n        stack.push(pop2);\n      } else if (typeof pop1.type === 'undefined') {\n        pop1.unshift(pop2);\n        pop1.push(arr[i]);\n        stack.push(pop1);\n      } else {\n        stack.push({\n          type: 1,\n          value: arr[i].value(pop2.value, pop1.value)\n        });\n      }\n    } else if (arr[i].type === 2 || arr[i].type === 9) {\n      pop1 = stack.pop();\n      pop2 = stack.pop();\n      if (typeof pop2.type === 'undefined') {\n        pop2 = pop2.concat(pop1);\n        pop2.push(arr[i]);\n        stack.push(pop2);\n      } else if (typeof pop1.type === 'undefined') {\n        pop1.unshift(pop2);\n        pop1.push(arr[i]);\n        stack.push(pop1);\n      } else {\n        stack.push({\n          type: 1,\n          value: arr[i].value(pop2.value, pop1.value)\n        });\n      }\n    } else if (arr[i].type === 12) {\n      pop1 = stack.pop();\n      if (typeof pop1.type !== 'undefined') {\n        pop1 = [pop1];\n      }\n      pop2 = stack.pop();\n      pop3 = stack.pop();\n      stack.push({\n        type: 1,\n        value: arr[i].value(pop3.value, pop2.value, new Mexp(pop1))\n      });\n    } else if (arr[i].type === 13) {\n      if (bool) {\n        stack.push({\n          value: UserDefined[arr[i].value],\n          type: 3\n        });\n      } else stack.push([arr[i]]);\n    }\n  }\n  if (stack.length > 1) {\n    throw new Mexp.Exception('Uncaught Syntax error');\n  }\n  return stack[0].value > 1000000000000000 ? 'Infinity' : parseFloat(stack[0].value.toFixed(15));\n};\nMexp.eval = function (str, tokens, obj) {\n  if (typeof tokens === 'undefined') {\n    return this.lex(str).toPostfix().postfixEval();\n  } else if (typeof obj === 'undefined') {\n    if (typeof tokens.length !== 'undefined') return this.lex(str, tokens).toPostfix().postfixEval();else return this.lex(str).toPostfix().postfixEval(tokens);\n  } else return this.lex(str, tokens).toPostfix().postfixEval(obj);\n};\nmodule.exports = Mexp;","map":null,"metadata":{},"sourceType":"script"}