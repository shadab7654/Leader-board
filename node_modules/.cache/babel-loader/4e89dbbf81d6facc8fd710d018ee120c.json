{"ast":null,"code":"import _isNil from 'lodash/isNil';\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _dec, _class, _class2, _temp;\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * @fileOverview Composed Chart\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Layer from '../container/Layer';\nimport Tooltip from '../component/Tooltip';\nimport Line from '../cartesian/Line';\nimport Bar from '../cartesian/Bar';\nimport Area from '../cartesian/Area';\nimport Rectangle from '../shape/Rectangle';\nimport generateCategoricalChart from './generateCategoricalChart';\nimport { getBandSizeOfAxis, getAnyElementOfObject } from '../util/DataUtils';\nimport { getPresentationAttributes, findChildByType } from '../util/ReactUtils';\nimport pureRender from '../util/PureRender';\nimport { AreaChart } from './AreaChart';\nimport { LineChart } from './LineChart';\nimport { BarChart } from './BarChart';\nimport composedDataDecorator from '../util/ComposedDataDecorator';\nvar GRAPHICAL_TYPES = ['Area', 'Bar', 'Line'];\nvar GRAPHICAL_MAP = {\n  Area: AreaChart,\n  Bar: BarChart,\n  Line: LineChart\n};\nvar ComposedChart = (_dec = composedDataDecorator({}), pureRender(_class = _dec(_class = (_temp = _class2 = function (_Component) {\n  _inherits(ComposedChart, _Component);\n  function ComposedChart() {\n    _classCallCheck(this, ComposedChart);\n    return _possibleConstructorReturn(this, (ComposedChart.__proto__ || Object.getPrototypeOf(ComposedChart)).apply(this, arguments));\n  }\n  _createClass(ComposedChart, [{\n    key: 'filterGraphicalItems',\n    value: function filterGraphicalItems() {\n      var graphicalItems = this.props.graphicalItems;\n      var record = {};\n      var result = [];\n      for (var i = 0, len = graphicalItems.length; i < len; i++) {\n        var item = graphicalItems[i];\n        var displayName = item.type.displayName;\n        if (GRAPHICAL_TYPES.indexOf(displayName) >= 0) {\n          if (!_isNil(record[displayName])) {\n            var index = record[displayName];\n            result[index].items = [].concat(_toConsumableArray(result[index].items), [item]);\n          } else {\n            record[displayName] = result.length;\n            result.push({\n              items: [item],\n              type: displayName\n            });\n          }\n        }\n      }\n      return result;\n    }\n  }, {\n    key: 'renderCursor',\n    value: function renderCursor(_ref) {\n      var xAxisMap = _ref.xAxisMap,\n        yAxisMap = _ref.yAxisMap,\n        offset = _ref.offset;\n      var _props = this.props,\n        children = _props.children,\n        isTooltipActive = _props.isTooltipActive,\n        layout = _props.layout,\n        activeTooltipIndex = _props.activeTooltipIndex,\n        axisTicks = _props.axisTicks;\n      var tooltipItem = findChildByType(children, Tooltip);\n      if (!tooltipItem || !tooltipItem.props.cursor || !isTooltipActive || activeTooltipIndex < 0) {\n        return null;\n      }\n      var axisMap = layout === 'horizontal' ? xAxisMap : yAxisMap;\n      var axis = getAnyElementOfObject(axisMap);\n      var ticks = axisTicks;\n      if (!ticks || !ticks[activeTooltipIndex]) {\n        return null;\n      }\n      var bandSize = getBandSizeOfAxis(axis);\n      var start = ticks[activeTooltipIndex].coordinate;\n      var cursorProps = _extends({\n        fill: '#f1f1f1'\n      }, getPresentationAttributes(tooltipItem.props.cursor), {\n        x: layout === 'horizontal' ? start : offset.left + 0.5,\n        y: layout === 'horizontal' ? offset.top + 0.5 : start,\n        width: layout === 'horizontal' ? bandSize : offset.width - 1,\n        height: layout === 'horizontal' ? offset.height - 1 : bandSize\n      });\n      return React.isValidElement(tooltipItem.props.cursor) ? React.cloneElement(tooltipItem.props.cursor, cursorProps) : React.createElement(Rectangle, cursorProps);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n      var _props2 = this.props,\n        xAxisMap = _props2.xAxisMap,\n        yAxisMap = _props2.yAxisMap,\n        offset = _props2.offset;\n      var filteredItems = this.filterGraphicalItems();\n      return React.createElement(Layer, {\n        className: 'recharts-composed'\n      }, this.renderCursor({\n        xAxisMap: xAxisMap,\n        yAxisMap: yAxisMap,\n        offset: offset\n      }), filteredItems.map(function (_ref2) {\n        var items = _ref2.items,\n          type = _ref2.type;\n        var Chart = GRAPHICAL_MAP[type];\n        return React.createElement(Chart, _extends({\n          key: type\n        }, _this2.props, {\n          graphicalItems: items,\n          isComposed: true\n        }));\n      }));\n    }\n  }]);\n  return ComposedChart;\n}(Component), _class2.displayName = 'ComposedChart', _class2.propTypes = {\n  allComposedData: PropTypes.array,\n  axisTicks: PropTypes.array,\n  layout: PropTypes.oneOf(['horizontal', 'vertical']),\n  dataStartIndex: PropTypes.number,\n  dataEndIndex: PropTypes.number,\n  isTooltipActive: PropTypes.bool,\n  activeTooltipIndex: PropTypes.number,\n  xAxisMap: PropTypes.object,\n  yAxisMap: PropTypes.object,\n  offset: PropTypes.object,\n  graphicalItems: PropTypes.array,\n  stackGroups: PropTypes.object,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node])\n}, _temp)) || _class) || _class);\nexport default generateCategoricalChart(ComposedChart, [Line, Area, Bar]);","map":null,"metadata":{},"sourceType":"module"}