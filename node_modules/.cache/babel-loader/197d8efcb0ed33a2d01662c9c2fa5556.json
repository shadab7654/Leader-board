{"ast":null,"code":"import _isFunction from 'lodash/isFunction';\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _class, _class2, _temp;\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * @fileOverview Axis of radial direction\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport pureRender from '../util/PureRender';\nimport Layer from '../container/Layer';\nimport { PRESENTATION_ATTRIBUTES, EVENT_ATTRIBUTES, getPresentationAttributes, filterEventsOfChild } from '../util/ReactUtils';\nimport Dot from '../shape/Dot';\nimport Polygon from '../shape/Polygon';\nimport Text from '../component/Text';\nimport { polarToCartesian } from '../util/PolarUtils';\nvar RADIAN = Math.PI / 180;\nvar eps = 1e-5;\nvar PolarAngleAxis = pureRender(_class = (_temp = _class2 = function (_Component) {\n  _inherits(PolarAngleAxis, _Component);\n  function PolarAngleAxis() {\n    _classCallCheck(this, PolarAngleAxis);\n    return _possibleConstructorReturn(this, (PolarAngleAxis.__proto__ || Object.getPrototypeOf(PolarAngleAxis)).apply(this, arguments));\n  }\n  _createClass(PolarAngleAxis, [{\n    key: 'getTickLineCoord',\n    /**\n     * Calculate the coordinate of line endpoint\n     * @param  {Object} data The Data if ticks\n     * @return {Object} (x0, y0): The start point of text,\n     *                  (x1, y1): The end point close to text,\n     *                  (x2, y2): The end point close to axis\n     */\n    value: function getTickLineCoord(data) {\n      var _props = this.props,\n        cx = _props.cx,\n        cy = _props.cy,\n        radius = _props.radius,\n        orientation = _props.orientation,\n        tickLine = _props.tickLine;\n      var tickLineSize = tickLine && tickLine.size || 8;\n      var p1 = polarToCartesian(cx, cy, radius, data.angle);\n      var p2 = polarToCartesian(cx, cy, radius + (orientation === 'inner' ? -1 : 1) * tickLineSize, data.angle);\n      return {\n        x1: p1.x,\n        y1: p1.y,\n        x2: p2.x,\n        y2: p2.y\n      };\n    }\n    /**\n     * Get the text-anchor of each tick\n     * @param  {Object} data Data of ticks\n     * @return {String} text-anchor\n     */\n  }, {\n    key: 'getTickTextAnchor',\n    value: function getTickTextAnchor(data) {\n      var orientation = this.props.orientation;\n      var cos = Math.cos(-data.angle * RADIAN);\n      var textAnchor = void 0;\n      if (cos > eps) {\n        textAnchor = orientation === 'outer' ? 'start' : 'end';\n      } else if (cos < -eps) {\n        textAnchor = orientation === 'outer' ? 'end' : 'start';\n      } else {\n        textAnchor = 'middle';\n      }\n      return textAnchor;\n    }\n  }, {\n    key: 'renderAxisLine',\n    value: function renderAxisLine() {\n      var _props2 = this.props,\n        cx = _props2.cx,\n        cy = _props2.cy,\n        radius = _props2.radius,\n        axisLine = _props2.axisLine,\n        axisLineType = _props2.axisLineType;\n      var props = _extends({}, getPresentationAttributes(this.props), {\n        fill: 'none'\n      }, getPresentationAttributes(axisLine));\n      if (axisLineType === 'circle') {\n        return React.createElement(Dot, _extends({\n          className: 'recharts-polar-angle-axis-line'\n        }, props, {\n          cx: cx,\n          cy: cy,\n          r: radius\n        }));\n      }\n      var ticks = this.props.ticks;\n      var points = ticks.map(function (entry) {\n        return polarToCartesian(cx, cy, radius, entry.angle);\n      });\n      return React.createElement(Polygon, _extends({\n        className: 'recharts-polar-angle-axis-line'\n      }, props, {\n        points: points\n      }));\n    }\n  }, {\n    key: 'renderTickItem',\n    value: function renderTickItem(option, props, value) {\n      var tickItem = void 0;\n      if (React.isValidElement(option)) {\n        tickItem = React.cloneElement(option, props);\n      } else if (_isFunction(option)) {\n        tickItem = option(props);\n      } else {\n        tickItem = React.createElement(Text, _extends({}, props, {\n          className: 'recharts-polar-angle-axis-tick-value'\n        }), value);\n      }\n      return tickItem;\n    }\n  }, {\n    key: 'renderTicks',\n    value: function renderTicks() {\n      var _this2 = this;\n      var _props3 = this.props,\n        ticks = _props3.ticks,\n        tick = _props3.tick,\n        tickLine = _props3.tickLine,\n        tickFormatter = _props3.tickFormatter,\n        stroke = _props3.stroke;\n      var axisProps = getPresentationAttributes(this.props);\n      var customTickProps = getPresentationAttributes(tick);\n      var tickLineProps = _extends({}, axisProps, {\n        fill: 'none'\n      }, getPresentationAttributes(tickLine));\n      var items = ticks.map(function (entry, i) {\n        var lineCoord = _this2.getTickLineCoord(entry);\n        var textAnchor = _this2.getTickTextAnchor(entry);\n        var tickProps = _extends({\n          textAnchor: textAnchor\n        }, axisProps, {\n          stroke: 'none',\n          fill: stroke\n        }, customTickProps, {\n          index: i,\n          payload: entry,\n          x: lineCoord.x2,\n          y: lineCoord.y2\n        });\n        return React.createElement(Layer, _extends({\n          className: 'recharts-polar-angle-axis-tick',\n          key: 'tick-' + i\n        }, filterEventsOfChild(_this2.props, entry, i)), tickLine && React.createElement('line', _extends({\n          className: 'recharts-polar-angle-axis-tick-line'\n        }, tickLineProps, lineCoord)), tick && _this2.renderTickItem(tick, tickProps, tickFormatter ? tickFormatter(entry.value) : entry.value));\n      });\n      return React.createElement(Layer, {\n        className: 'recharts-polar-angle-axis-ticks'\n      }, items);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props4 = this.props,\n        ticks = _props4.ticks,\n        radius = _props4.radius,\n        axisLine = _props4.axisLine;\n      if (radius <= 0 || !ticks || !ticks.length) {\n        return null;\n      }\n      return React.createElement(Layer, {\n        className: 'recharts-polar-angle-axis'\n      }, axisLine && this.renderAxisLine(), this.renderTicks());\n    }\n  }]);\n  return PolarAngleAxis;\n}(Component), _class2.displayName = 'PolarAngleAxis', _class2.propTypes = _extends({}, PRESENTATION_ATTRIBUTES, EVENT_ATTRIBUTES, {\n  dataKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.func]),\n  cx: PropTypes.number,\n  cy: PropTypes.number,\n  radius: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  hide: PropTypes.bool,\n  axisLine: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  axisLineType: PropTypes.oneOf(['polygon', 'circle']),\n  tickLine: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  tick: PropTypes.oneOfType([PropTypes.bool, PropTypes.func, PropTypes.object, PropTypes.element]),\n  ticks: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.any,\n    angle: PropTypes.number\n  })),\n  stroke: PropTypes.string,\n  orientation: PropTypes.oneOf(['inner', 'outer']),\n  tickFormatter: PropTypes.func\n}), _class2.defaultProps = {\n  cx: 0,\n  cy: 0,\n  orientation: 'outer',\n  axisLine: true,\n  tickLine: true,\n  tick: true,\n  hide: false\n}, _temp)) || _class;\nexport default PolarAngleAxis;","map":null,"metadata":{},"sourceType":"module"}