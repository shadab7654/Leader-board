{"ast":null,"code":"import _isFunction from 'lodash/isFunction';\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _class, _class2, _temp2;\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * @fileOverview Legend\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport pureRender from '../util/PureRender';\nimport DefaultLegendContent from './DefaultLegendContent';\nimport { isNumber } from '../util/DataUtils';\nimport { LEGEND_TYPES } from '../util/ReactUtils';\nvar renderContent = function renderContent(content, props) {\n  if (React.isValidElement(content)) {\n    return React.cloneElement(content, props);\n  } else if (_isFunction(content)) {\n    return content(props);\n  }\n  return React.createElement(DefaultLegendContent, props);\n};\nvar EPS = 1;\nvar ICON_TYPES = LEGEND_TYPES.filter(function (type) {\n  return type !== 'none';\n});\nvar Legend = pureRender(_class = (_temp2 = _class2 = function (_Component) {\n  _inherits(Legend, _Component);\n  function Legend() {\n    var _ref;\n    var _temp, _this, _ret;\n    _classCallCheck(this, Legend);\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Legend.__proto__ || Object.getPrototypeOf(Legend)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      boxWidth: -1,\n      boxHeight: -1\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n  _createClass(Legend, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.updateBBox();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this.updateBBox();\n    }\n  }, {\n    key: 'getBBox',\n    value: function getBBox() {\n      var _state = this.state,\n        boxWidth = _state.boxWidth,\n        boxHeight = _state.boxHeight;\n      if (boxWidth >= 0 && boxHeight >= 0) {\n        return {\n          width: boxWidth,\n          height: boxHeight\n        };\n      }\n      return null;\n    }\n  }, {\n    key: 'getDefaultPosition',\n    value: function getDefaultPosition(style) {\n      var _props = this.props,\n        layout = _props.layout,\n        align = _props.align,\n        verticalAlign = _props.verticalAlign,\n        margin = _props.margin,\n        chartWidth = _props.chartWidth,\n        chartHeight = _props.chartHeight;\n      var hPos = void 0,\n        vPos = void 0;\n      if (!style || (style.left === undefined || style.left === null) && (style.right === undefined || style.right === null)) {\n        if (align === 'center' && layout === 'vertical') {\n          var box = this.getBBox() || {\n            width: 0\n          };\n          hPos = {\n            left: ((chartWidth || 0) - box.width) / 2\n          };\n        } else {\n          hPos = align === 'right' ? {\n            right: margin && margin.right || 0\n          } : {\n            left: margin && margin.left || 0\n          };\n        }\n      }\n      if (!style || (style.top === undefined || style.top === null) && (style.bottom === undefined || style.bottom === null)) {\n        if (verticalAlign === 'middle') {\n          var _box = this.getBBox() || {\n            height: 0\n          };\n          vPos = {\n            top: ((chartHeight || 0) - _box.height) / 2\n          };\n        } else {\n          vPos = verticalAlign === 'bottom' ? {\n            bottom: margin && margin.bottom || 0\n          } : {\n            top: margin && margin.top || 0\n          };\n        }\n      }\n      return _extends({}, hPos, vPos);\n    }\n  }, {\n    key: 'updateBBox',\n    value: function updateBBox() {\n      var _this2 = this;\n      var _state2 = this.state,\n        boxWidth = _state2.boxWidth,\n        boxHeight = _state2.boxHeight;\n      var onBBoxUpdate = this.props.onBBoxUpdate;\n      if (this.wrapperNode && this.wrapperNode.getBoundingClientRect) {\n        (function () {\n          var box = _this2.wrapperNode.getBoundingClientRect();\n          if (Math.abs(box.width - boxWidth) > EPS || Math.abs(box.height - boxHeight) > EPS) {\n            _this2.setState({\n              boxWidth: box.width,\n              boxHeight: box.height\n            }, function () {\n              if (onBBoxUpdate) {\n                onBBoxUpdate(box);\n              }\n            });\n          }\n        })();\n      } else if (boxWidth !== -1 || boxHeight !== -1) {\n        this.setState({\n          boxWidth: -1,\n          boxHeight: -1\n        }, function () {\n          if (onBBoxUpdate) {\n            onBBoxUpdate(null);\n          }\n        });\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n      var _props2 = this.props,\n        content = _props2.content,\n        width = _props2.width,\n        height = _props2.height,\n        wrapperStyle = _props2.wrapperStyle;\n      var outerStyle = _extends({\n        position: 'absolute',\n        width: width || 'auto',\n        height: height || 'auto'\n      }, this.getDefaultPosition(wrapperStyle), wrapperStyle);\n      return React.createElement('div', {\n        className: 'recharts-legend-wrapper',\n        style: outerStyle,\n        ref: function ref(node) {\n          _this3.wrapperNode = node;\n        }\n      }, renderContent(content, this.props));\n    }\n  }], [{\n    key: 'getWithHeight',\n    value: function getWithHeight(item, chartWidth) {\n      var layout = item.props.layout;\n      if (layout === 'vertical' && isNumber(item.props.height)) {\n        return {\n          height: item.props.height\n        };\n      } else if (layout === 'horizontal') {\n        return {\n          width: item.props.width || chartWidth\n        };\n      }\n      return null;\n    }\n  }]);\n  return Legend;\n}(Component), _class2.displayName = 'Legend', _class2.propTypes = {\n  content: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  wrapperStyle: PropTypes.object,\n  chartWidth: PropTypes.number,\n  chartHeight: PropTypes.number,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  iconSize: PropTypes.number,\n  iconType: PropTypes.oneOf(ICON_TYPES),\n  layout: PropTypes.oneOf(['horizontal', 'vertical']),\n  align: PropTypes.oneOf(['center', 'left', 'right']),\n  verticalAlign: PropTypes.oneOf(['top', 'bottom', 'middle']),\n  margin: PropTypes.shape({\n    top: PropTypes.number,\n    left: PropTypes.number,\n    bottom: PropTypes.number,\n    right: PropTypes.number\n  }),\n  payload: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.any,\n    id: PropTypes.any,\n    type: PropTypes.oneOf(LEGEND_TYPES)\n  })),\n  formatter: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onClick: PropTypes.func,\n  onBBoxUpdate: PropTypes.func\n}, _class2.defaultProps = {\n  iconSize: 14,\n  layout: 'horizontal',\n  align: 'center',\n  verticalAlign: 'bottom'\n}, _temp2)) || _class;\nexport default Legend;","map":null,"metadata":{},"sourceType":"module"}