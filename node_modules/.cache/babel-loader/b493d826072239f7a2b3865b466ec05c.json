{"ast":null,"code":"import _isArray from 'lodash/isArray';\nimport _isNil from 'lodash/isNil';\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _dec, _class, _class2, _temp;\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * @fileOverview Bar Chart\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Layer from '../container/Layer';\nimport Tooltip from '../component/Tooltip';\nimport Rectangle from '../shape/Rectangle';\nimport { getBandSizeOfAxis, getAnyElementOfObject, getValueByDataKey, findPositionOfBar, truncateByDomain, mathSign } from '../util/DataUtils';\nimport { getPresentationAttributes, findChildByType, findAllByType } from '../util/ReactUtils';\nimport generateCategoricalChart from './generateCategoricalChart';\nimport Cell from '../component/Cell';\nimport Bar from '../cartesian/Bar';\nimport AnimationDecorator from '../util/AnimationDecorator';\nimport composedDataDecorator from '../util/ComposedDataDecorator';\nvar getCategoryAxisCoordinate = function getCategoryAxisCoordinate(_ref) {\n  var axis = _ref.axis,\n    ticks = _ref.ticks,\n    offset = _ref.offset,\n    bandSize = _ref.bandSize,\n    entry = _ref.entry,\n    index = _ref.index;\n  if (axis.type === 'category') {\n    return ticks[index] ? ticks[index].coordinate + offset : null;\n  }\n  var value = getValueByDataKey(entry, axis.dataKey);\n  return !_isNil(value) ? axis.scale(value) - bandSize / 2 + offset : null;\n};\nvar getBaseValue = function getBaseValue(_ref2) {\n  var props = _ref2.props,\n    xAxis = _ref2.xAxis,\n    yAxis = _ref2.yAxis;\n  var layout = props.layout;\n  var numberAxis = layout === 'horizontal' ? yAxis : xAxis;\n  var domain = numberAxis.scale.domain();\n  if (numberAxis.type === 'number') {\n    var min = Math.min(domain[0], domain[1]);\n    var max = Math.max(domain[0], domain[1]);\n    if (min <= 0 && max >= 0) {\n      return 0;\n    }\n    if (max < 0) {\n      return max;\n    }\n    return min;\n  }\n  return domain[0];\n};\n\n/**\n * Compose the data of each group\n * @param {Object} props Props for the component\n * @param {Object} item        An instance of Bar\n * @param {Array} barPosition The offset and size of each bar\n * @param {Object} xAxis       The configuration of x-axis\n * @param {Object} yAxis       The configuration of y-axis\n * @param {Array} stackedData  The stacked data of a bar item\n * @return{Array} Composed data\n */\nvar getComposedData = function getComposedData(_ref3) {\n  var props = _ref3.props,\n    item = _ref3.item,\n    barPosition = _ref3.barPosition,\n    bandSize = _ref3.bandSize,\n    xAxis = _ref3.xAxis,\n    yAxis = _ref3.yAxis,\n    xTicks = _ref3.xTicks,\n    yTicks = _ref3.yTicks,\n    stackedData = _ref3.stackedData;\n  var layout = props.layout,\n    dataStartIndex = props.dataStartIndex,\n    dataEndIndex = props.dataEndIndex;\n  var _item$props = item.props,\n    dataKey = _item$props.dataKey,\n    children = _item$props.children,\n    minPointSize = _item$props.minPointSize;\n  var pos = findPositionOfBar(barPosition, item);\n  var stackedDomain = stackedData && layout === 'horizontal' ? yAxis.scale.domain() : xAxis.scale.domain();\n  if (!pos) {\n    return [];\n  }\n  var data = props.data.slice(dataStartIndex, dataEndIndex + 1);\n  var baseValue = getBaseValue({\n    props: props,\n    xAxis: xAxis,\n    yAxis: yAxis\n  });\n  var cells = findAllByType(children, Cell);\n  return data.map(function (entry, index) {\n    var value = void 0,\n      x = void 0,\n      y = void 0,\n      width = void 0,\n      height = void 0;\n    if (stackedData) {\n      value = truncateByDomain(stackedData[dataStartIndex + index], stackedDomain);\n    } else {\n      value = getValueByDataKey(entry, dataKey);\n      if (!_isArray(value)) {\n        value = [baseValue, value];\n      }\n    }\n    if (layout === 'horizontal') {\n      x = getCategoryAxisCoordinate({\n        axis: xAxis,\n        ticks: xTicks,\n        bandSize: bandSize,\n        offset: pos.offset,\n        entry: entry,\n        index: index\n      });\n      y = yAxis.scale(value[1]);\n      width = pos.size;\n      height = yAxis.scale(value[0]) - yAxis.scale(value[1]);\n      if (Math.abs(minPointSize) > 0 && Math.abs(height) < Math.abs(minPointSize)) {\n        var delta = mathSign(height || minPointSize) * (Math.abs(minPointSize) - Math.abs(height));\n        y -= delta;\n        height += delta;\n      }\n    } else {\n      x = xAxis.scale(value[0]);\n      y = getCategoryAxisCoordinate({\n        axis: yAxis,\n        ticks: yTicks,\n        bandSize: bandSize,\n        offset: pos.offset,\n        entry: entry,\n        index: index\n      });\n      width = xAxis.scale(value[1]) - xAxis.scale(value[0]);\n      height = pos.size;\n      if (Math.abs(minPointSize) > 0 && Math.abs(width) < Math.abs(minPointSize)) {\n        var _delta = mathSign(width || minPointSize) * (Math.abs(minPointSize) - Math.abs(width));\n        width += _delta;\n      }\n    }\n    return _extends({}, entry, {\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      value: stackedData ? value : value[1],\n      payload: entry\n    }, cells && cells[index] && cells[index].props);\n  });\n};\nvar BarChart = (_dec = composedDataDecorator({\n  getComposedData: getComposedData\n}), AnimationDecorator(_class = _dec(_class = (_temp = _class2 = function (_Component) {\n  _inherits(BarChart, _Component);\n  function BarChart() {\n    _classCallCheck(this, BarChart);\n    return _possibleConstructorReturn(this, (BarChart.__proto__ || Object.getPrototypeOf(BarChart)).apply(this, arguments));\n  }\n  _createClass(BarChart, [{\n    key: 'renderCursor',\n    value: function renderCursor(_ref4) {\n      var xAxisMap = _ref4.xAxisMap,\n        yAxisMap = _ref4.yAxisMap,\n        offset = _ref4.offset;\n      var _props = this.props,\n        children = _props.children,\n        isTooltipActive = _props.isTooltipActive,\n        layout = _props.layout,\n        activeTooltipIndex = _props.activeTooltipIndex,\n        axisTicks = _props.axisTicks;\n      var tooltipItem = findChildByType(children, Tooltip);\n      if (!tooltipItem || !tooltipItem.props.cursor || !isTooltipActive || activeTooltipIndex < 0) {\n        return null;\n      }\n      var axisMap = layout === 'horizontal' ? xAxisMap : yAxisMap;\n      var axis = getAnyElementOfObject(axisMap);\n      var ticks = axisTicks;\n      if (!ticks || !ticks[activeTooltipIndex]) {\n        return null;\n      }\n      var bandSize = getBandSizeOfAxis(axis);\n      var start = ticks[activeTooltipIndex].coordinate;\n      var cursorProps = _extends({\n        fill: '#f1f1f1'\n      }, getPresentationAttributes(tooltipItem.props.cursor), {\n        x: layout === 'horizontal' ? start : offset.left + 0.5,\n        y: layout === 'horizontal' ? offset.top + 0.5 : start,\n        width: layout === 'horizontal' ? bandSize : offset.width - 1,\n        height: layout === 'horizontal' ? offset.height - 1 : bandSize\n      });\n      return React.isValidElement(tooltipItem.props.cursor) ? React.cloneElement(tooltipItem.props.cursor, cursorProps) : React.createElement(Rectangle, _extends({}, cursorProps, {\n        className: 'recharts-bar-cursor'\n      }));\n    }\n\n    /**\n     * Draw the main part of bar chart\n     * @param  {Array} items     All the instance of Bar\n     * @param  {Object} offset   The offset of main part in the svg element\n     * @return {ReactComponent}  All the instances of Bar\n     */\n  }, {\n    key: 'renderItems',\n    value: function renderItems(items, offset) {\n      if (!items || !items.length) {\n        return null;\n      }\n      var _props2 = this.props,\n        layout = _props2.layout,\n        xAxisMap = _props2.xAxisMap,\n        yAxisMap = _props2.yAxisMap;\n      var _props3 = this.props,\n        animationId = _props3.animationId,\n        allComposedData = _props3.allComposedData;\n      return items.map(function (child, i) {\n        return React.cloneElement(child, _extends({\n          key: child.key || 'bar-' + i,\n          layout: layout,\n          animationId: animationId\n        }, offset, {\n          data: allComposedData[i],\n          xAxis: xAxisMap[child.props.xAxisId],\n          yAxis: yAxisMap[child.props.yAxisId]\n        }));\n      }, this);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props4 = this.props,\n        isComposed = _props4.isComposed,\n        graphicalItems = _props4.graphicalItems,\n        xAxisMap = _props4.xAxisMap,\n        yAxisMap = _props4.yAxisMap,\n        offset = _props4.offset;\n      return React.createElement(Layer, {\n        className: 'recharts-bar-graphical'\n      }, !isComposed && this.renderCursor({\n        xAxisMap: xAxisMap,\n        yAxisMap: yAxisMap,\n        offset: offset\n      }), this.renderItems(graphicalItems, offset));\n    }\n  }]);\n  return BarChart;\n}(Component), _class2.displayName = 'BarChart', _class2.propTypes = {\n  allComposedData: PropTypes.array,\n  axisTicks: PropTypes.array,\n  layout: PropTypes.oneOf(['horizontal', 'vertical']),\n  dataStartIndex: PropTypes.number,\n  dataEndIndex: PropTypes.number,\n  data: PropTypes.array,\n  isTooltipActive: PropTypes.bool,\n  activeTooltipIndex: PropTypes.number,\n  xAxisMap: PropTypes.object,\n  yAxisMap: PropTypes.object,\n  offset: PropTypes.object,\n  graphicalItems: PropTypes.array,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  stackGroups: PropTypes.object,\n  barCategoryGap: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  barGap: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  barSize: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  maxBarSize: PropTypes.number,\n  // used internally\n  isComposed: PropTypes.bool,\n  animationId: PropTypes.number\n}, _class2.defaultProps = {\n  barCategoryGap: '10%',\n  barGap: 4\n}, _temp)) || _class) || _class);\nexport default generateCategoricalChart(BarChart, Bar);\nexport { BarChart };","map":null,"metadata":{},"sourceType":"module"}