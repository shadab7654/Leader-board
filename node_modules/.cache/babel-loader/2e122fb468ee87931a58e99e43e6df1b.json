{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _class, _class2, _temp;\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * @fileOverview Polar Grid\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport pureRender from '../util/PureRender';\nimport { polarToCartesian } from '../util/PolarUtils';\nimport { PRESENTATION_ATTRIBUTES, getPresentationAttributes } from '../util/ReactUtils';\nvar PolarGrid = pureRender(_class = (_temp = _class2 = function (_Component) {\n  _inherits(PolarGrid, _Component);\n  function PolarGrid() {\n    _classCallCheck(this, PolarGrid);\n    return _possibleConstructorReturn(this, (PolarGrid.__proto__ || Object.getPrototypeOf(PolarGrid)).apply(this, arguments));\n  }\n  _createClass(PolarGrid, [{\n    key: 'getPolygonPath',\n    value: function getPolygonPath(radius) {\n      var _props = this.props,\n        cx = _props.cx,\n        cy = _props.cy,\n        polarAngles = _props.polarAngles;\n      var path = '';\n      polarAngles.forEach(function (angle, i) {\n        var point = polarToCartesian(cx, cy, radius, angle);\n        if (i) {\n          path += 'L ' + point.x + ',' + point.y;\n        } else {\n          path += 'M ' + point.x + ',' + point.y;\n        }\n      });\n      path += 'Z';\n      return path;\n    }\n    /**\n     * Draw axis of radial line\n     * @return {[type]} The lines\n     */\n  }, {\n    key: 'renderPolarAngles',\n    value: function renderPolarAngles() {\n      var _props2 = this.props,\n        cx = _props2.cx,\n        cy = _props2.cy,\n        innerRadius = _props2.innerRadius,\n        outerRadius = _props2.outerRadius,\n        polarAngles = _props2.polarAngles;\n      if (!polarAngles || !polarAngles.length) {\n        return null;\n      }\n      var props = _extends({\n        stroke: '#ccc'\n      }, getPresentationAttributes(this.props));\n      return React.createElement('g', {\n        className: 'recharts-polar-grid-angle'\n      }, polarAngles.map(function (entry, i) {\n        var start = polarToCartesian(cx, cy, innerRadius, entry);\n        var end = polarToCartesian(cx, cy, outerRadius, entry);\n        return React.createElement('line', _extends({}, props, {\n          key: 'line-' + i,\n          x1: start.x,\n          y1: start.y,\n          x2: end.x,\n          y2: end.y\n        }));\n      }));\n    }\n    /**\n     * Draw concentric circles\n     * @param {Number} radius The radius of circle\n     * @param {Number} index  The index of circle\n     * @param {Object} extraProps Extra props\n     * @return {ReactElement} circle\n     */\n  }, {\n    key: 'renderConcentricCircle',\n    value: function renderConcentricCircle(radius, index, extraProps) {\n      var _props3 = this.props,\n        cx = _props3.cx,\n        cy = _props3.cy;\n      var props = _extends({\n        stroke: '#ccc'\n      }, getPresentationAttributes(this.props), {\n        fill: 'none'\n      }, extraProps);\n      return React.createElement('circle', _extends({}, props, {\n        className: 'recharts-polar-grid-concentric-circle',\n        key: 'circle-' + index,\n        cx: cx,\n        cy: cy,\n        r: radius\n      }));\n    }\n    /**\n     * Draw concentric polygons\n     * @param {Number} radius     The radius of polygon\n     * @param {Number} index      The index of polygon\n     * @param {Object} extraProps Extra props\n     * @return {ReactElement} polygon\n     */\n  }, {\n    key: 'renderConcentricPolygon',\n    value: function renderConcentricPolygon(radius, index, extraProps) {\n      var props = _extends({\n        stroke: '#ccc'\n      }, getPresentationAttributes(this.props), {\n        fill: 'none'\n      }, extraProps);\n      return React.createElement('path', _extends({}, props, {\n        className: 'recharts-polar-grid-concentric-polygon',\n        key: 'path-' + index,\n        d: this.getPolygonPath(radius)\n      }));\n    }\n\n    /**\n     * Draw concentric axis\n     * @return {ReactElement} Concentric axis\n     * @todo Optimize the name\n     */\n  }, {\n    key: 'renderConcentricPath',\n    value: function renderConcentricPath() {\n      var _this2 = this;\n      var _props4 = this.props,\n        polarRadius = _props4.polarRadius,\n        gridType = _props4.gridType;\n      if (!polarRadius || !polarRadius.length) {\n        return null;\n      }\n      return React.createElement('g', {\n        className: 'recharts-polar-grid-concentric'\n      }, polarRadius.map(function (entry, i) {\n        return gridType === 'circle' ? _this2.renderConcentricCircle(entry, i) : _this2.renderConcentricPolygon(entry, i);\n      }));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var outerRadius = this.props.outerRadius;\n      if (outerRadius <= 0) {\n        return null;\n      }\n      return React.createElement('g', {\n        className: 'recharts-polar-grid'\n      }, this.renderPolarAngles(), this.renderConcentricPath());\n    }\n  }]);\n  return PolarGrid;\n}(Component), _class2.displayName = 'PolarGrid', _class2.propTypes = _extends({}, PRESENTATION_ATTRIBUTES, {\n  cx: PropTypes.number,\n  cy: PropTypes.number,\n  innerRadius: PropTypes.number,\n  outerRadius: PropTypes.number,\n  polarAngles: PropTypes.arrayOf(PropTypes.number),\n  polarRadius: PropTypes.arrayOf(PropTypes.number),\n  gridType: PropTypes.oneOf(['polygon', 'circle'])\n}), _class2.defaultProps = {\n  cx: 0,\n  cy: 0,\n  innerRadius: 0,\n  outerRadius: 0,\n  gridType: 'polygon'\n}, _temp)) || _class;\nexport default PolarGrid;","map":null,"metadata":{},"sourceType":"module"}