{"ast":null,"code":"import _isNil from 'lodash/isNil';\nimport _isArray from 'lodash/isArray';\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { getNiceTickValues, getTickValuesFixedDomain } from 'recharts-scale';\nimport { stack as shapeStack, stackOrderNone, stackOffsetExpand, stackOffsetNone, stackOffsetSilhouette, stackOffsetWiggle } from 'd3-shape';\nimport { findAllByType, findChildByType } from './ReactUtils';\nimport { getPercentValue, isNumber, isNumOrStr, getValueByDataKey, uniqueId } from './DataUtils';\nimport ReferenceDot from '../cartesian/ReferenceDot';\nimport ReferenceLine from '../cartesian/ReferenceLine';\nimport ReferenceArea from '../cartesian/ReferenceArea';\nimport Legend from '../component/Legend';\n\n/* eslint no-param-reassign: 0 */\nexport var offsetSign = function offsetSign(series) {\n  var n = series.length;\n  if (n <= 0) {\n    return;\n  }\n  for (var j = 0, m = series[0].length; j < m; ++j) {\n    var positive = 0;\n    var negative = 0;\n    for (var i = 0; i < n; ++i) {\n      var value = isNaN(series[i][j][1]) ? series[i][j][0] : series[i][j][1];\n      if (value >= 0) {\n        series[i][j][0] = positive;\n        series[i][j][1] = positive + value;\n        positive = series[i][j][1];\n      } else {\n        series[i][j][0] = negative;\n        series[i][j][1] = negative + value;\n        negative = series[i][j][1];\n      }\n    }\n  }\n};\nvar STACK_OFFSET_MAP = {\n  sign: offsetSign,\n  expand: stackOffsetExpand,\n  none: stackOffsetNone,\n  silhouette: stackOffsetSilhouette,\n  wiggle: stackOffsetWiggle\n};\nexport var detectReferenceElementsDomain = function detectReferenceElementsDomain(children, domain, axisId, axisType) {\n  var lines = findAllByType(children, ReferenceLine);\n  var dots = findAllByType(children, ReferenceDot);\n  var elements = lines.concat(dots);\n  var areas = findAllByType(children, ReferenceArea);\n  var idKey = axisType + 'Id';\n  var valueKey = axisType[0];\n  var finalDomain = domain;\n  if (elements.length) {\n    finalDomain = elements.reduce(function (result, el) {\n      if (el.props[idKey] === axisId && el.props.alwaysShow && isNumber(el.props[valueKey])) {\n        var value = el.props[valueKey];\n        return [Math.min(result[0], value), Math.max(result[1], value)];\n      }\n      return result;\n    }, finalDomain);\n  }\n  if (areas.length) {\n    (function () {\n      var key1 = valueKey + '1';\n      var key2 = valueKey + '2';\n      finalDomain = areas.reduce(function (result, el) {\n        if (el.props[idKey] === axisId && el.props.alwaysShow && isNumber(el.props[key1]) && isNumber(el.props[key2])) {\n          var value1 = el.props[key1];\n          var value2 = el.props[key2];\n          return [Math.min(result[0], value1, value2), Math.max(result[1], value1, value2)];\n        }\n        return result;\n      }, finalDomain);\n    })();\n  }\n  return finalDomain;\n};\nexport var getStackedData = function getStackedData(data, stackItems, offsetType) {\n  var dataKeys = stackItems.map(function (item) {\n    return item.props.dataKey;\n  });\n  var stack = shapeStack().keys(dataKeys).value(function (d, key) {\n    return +getValueByDataKey(d, key, 0);\n  }).order(stackOrderNone).offset(STACK_OFFSET_MAP[offsetType]);\n  return stack(data);\n};\nexport var getStackGroupsByAxisId = function getStackGroupsByAxisId(data, items, numericAxisId, cateAxisId, offsetType) {\n  var stackGroups = items.reduce(function (result, item) {\n    var stackId = item.props.stackId;\n    var axisId = item.props[numericAxisId];\n    var parentGroup = result[axisId] || {\n      hasStack: false,\n      stackGroups: {}\n    };\n    if (isNumOrStr(stackId)) {\n      var childGroup = parentGroup.stackGroups[stackId] || {\n        numericAxisId: numericAxisId,\n        cateAxisId: cateAxisId,\n        items: []\n      };\n      childGroup.items = [item].concat(childGroup.items);\n      parentGroup.hasStack = true;\n      parentGroup.stackGroups[stackId] = childGroup;\n    } else {\n      parentGroup.stackGroups[uniqueId('_stackId_')] = {\n        numericAxisId: numericAxisId,\n        cateAxisId: cateAxisId,\n        items: [item]\n      };\n    }\n    return _extends({}, result, _defineProperty({}, axisId, parentGroup));\n  }, {});\n  return Object.keys(stackGroups).reduce(function (result, axisId) {\n    var group = stackGroups[axisId];\n    if (group.hasStack) {\n      group.stackGroups = Object.keys(group.stackGroups).reduce(function (res, stackId) {\n        var g = group.stackGroups[stackId];\n        return _extends({}, res, _defineProperty({}, stackId, {\n          numericAxisId: numericAxisId,\n          cateAxisId: cateAxisId,\n          items: g.items,\n          stackedData: getStackedData(data, g.items, offsetType)\n        }));\n      }, {});\n    }\n    return _extends({}, result, _defineProperty({}, axisId, group));\n  }, {});\n};\nexport var getStackedDataOfItem = function getStackedDataOfItem(item, stackGroups) {\n  var stackId = item.props.stackId;\n  if (isNumOrStr(stackId)) {\n    var group = stackGroups[stackId];\n    if (group && group.items.length) {\n      var itemIndex = -1;\n      for (var i = 0, len = group.items.length; i < len; i++) {\n        if (group.items[i] === item) {\n          itemIndex = i;\n          break;\n        }\n      }\n      return itemIndex >= 0 ? group.stackedData[itemIndex] : null;\n    }\n  }\n  return null;\n};\n/**\n * get domain of ticks\n * @param  {Array} ticks Ticks of axis\n * @param  {String} type  The type of axis\n * @return {Array} domain\n */\nexport var calculateDomainOfTicks = function calculateDomainOfTicks(ticks, type) {\n  if (type === 'number') {\n    return [Math.min.apply(null, ticks), Math.max.apply(null, ticks)];\n  }\n  return ticks;\n};\n\n/**\n * Get domain of data by key\n * @param  {Array}   data      The data displayed in the chart\n * @param  {String}  key       The unique key of a group of data\n * @param  {String}  type      The type of axis\n * @param  {Boolean} filterNil Whether or not filter nil values\n * @return {Array} Domain of data\n */\nexport var getDomainOfDataByKey = function getDomainOfDataByKey(data, key, type, filterNil) {\n  var flattenData = data.reduce(function (result, entry) {\n    var value = getValueByDataKey(entry, key);\n    if (_isArray(value)) {\n      return [].concat(_toConsumableArray(result), _toConsumableArray(value));\n    }\n    return [].concat(_toConsumableArray(result), [value]);\n  }, []);\n  if (type === 'number') {\n    var domain = flattenData.filter(isNumber);\n    return [Math.min.apply(null, domain), Math.max.apply(null, domain)];\n  }\n  var validateData = filterNil ? flattenData.filter(function (entry) {\n    return !_isNil(entry);\n  }) : flattenData;\n  return validateData.map(function (entry) {\n    return isNumOrStr(entry) ? entry : '';\n  });\n};\nvar getDomainOfSingle = function getDomainOfSingle(data) {\n  return data.reduce(function (result, entry) {\n    return [Math.min.apply(null, entry.concat([result[0]]).filter(isNumber)), Math.max.apply(null, entry.concat([result[1]]).filter(isNumber))];\n  }, [Infinity, -Infinity]);\n};\nexport var getDomainOfStackGroups = function getDomainOfStackGroups(stackGroups, startIndex, endIndex) {\n  return Object.keys(stackGroups).reduce(function (result, stackId) {\n    var group = stackGroups[stackId];\n    var stackedData = group.stackedData;\n    var domain = stackedData.reduce(function (res, entry) {\n      var s = getDomainOfSingle(entry.slice(startIndex, endIndex + 1));\n      return [Math.min(res[0], s[0]), Math.max(res[1], s[1])];\n    }, [Infinity, -Infinity]);\n    return [Math.min(domain[0], result[0]), Math.max(domain[1], result[1])];\n  }, [Infinity, -Infinity]).map(function (result) {\n    return result === Infinity || result === -Infinity ? 0 : result;\n  });\n};\n\n/**\n * Get domain of data by the configuration of item element\n * @param  {Array}   data      The data displayed in the chart\n * @param  {Array}   items     The instances of item\n * @param  {String}  type      The type of axis, number - Number Axis, category - Category Axis\n * @param  {Boolean} filterNil Whether or not filter nil values\n * @return {Array}        Domain\n */\nexport var getDomainOfItemsWithSameAxis = function getDomainOfItemsWithSameAxis(data, items, type, filterNil) {\n  var domains = items.map(function (item) {\n    return getDomainOfDataByKey(data, item.props.dataKey, type, filterNil);\n  });\n  if (type === 'number') {\n    // Calculate the domain of number axis\n    return domains.reduce(function (result, entry) {\n      return [Math.min(result[0], entry[0]), Math.max(result[1], entry[1])];\n    }, [Infinity, -Infinity]);\n  }\n  var tag = {};\n  // Get the union set of category axis\n  return domains.reduce(function (result, entry) {\n    for (var i = 0, len = entry.length; i < len; i++) {\n      if (!tag[entry[i]]) {\n        tag[entry[i]] = true;\n        result.push(entry[i]);\n      }\n    }\n    return result;\n  }, []);\n};\nexport var isCategorialAxis = function isCategorialAxis(layout, axisType) {\n  return layout === 'horizontal' && axisType === 'xAxis' || layout === 'vertical' && axisType === 'yAxis';\n};\n/**\n* Calculate the Coordinates of grid\n* @param  {Array} ticks The ticks in axis\n* @param {Number} min   The minimun value of axis\n* @param {Number} max   The maximun value of axis\n* @return {Array}       Coordinates\n*/\nexport var getCoordinatesOfGrid = function getCoordinatesOfGrid(ticks, min, max) {\n  var hasMin = void 0,\n    hasMax = void 0;\n  var values = ticks.map(function (entry) {\n    if (entry.coordinate === min) {\n      hasMin = true;\n    }\n    if (entry.coordinate === max) {\n      hasMax = true;\n    }\n    return entry.coordinate;\n  });\n  if (!hasMin) {\n    values.push(min);\n  }\n  if (!hasMax) {\n    values.push(max);\n  }\n  return values;\n};\n\n/**\n * Get the ticks of an axis\n * @param  {Object}  axis The configuration of an axis\n * @param {Boolean} isGrid Whether or not are the ticks in grid\n * @param {Boolean} isAll Return the ticks of all the points or not\n * @return {Array}  Ticks\n */\nexport var getTicksOfAxis = function getTicksOfAxis(axis, isGrid, isAll) {\n  if (!axis) return null;\n  var scale = axis.scale;\n  var duplicateDomain = axis.duplicateDomain,\n    type = axis.type;\n  var offset = (isGrid || isAll) && type === 'category' && scale.bandwidth ? scale.bandwidth() / 2 : 0;\n\n  // The ticks setted by user should only affect the ticks adjacent to axis line\n  if (isGrid && (axis.ticks || axis.niceTicks)) {\n    return (axis.ticks || axis.niceTicks).map(function (entry) {\n      var scaleContent = duplicateDomain ? duplicateDomain.indexOf(entry) : entry;\n      return {\n        coordinate: scale(scaleContent) + offset,\n        value: entry\n      };\n    });\n  }\n  if (axis.isCategorial && axis.categoricalDomain) {\n    return axis.categoricalDomain.map(function (entry, index) {\n      return {\n        coordinate: scale(entry),\n        value: entry,\n        index: index\n      };\n    });\n  }\n  if (scale.ticks && !isAll) {\n    return scale.ticks(axis.tickCount).map(function (entry) {\n      return {\n        coordinate: scale(entry) + offset,\n        value: entry\n      };\n    });\n  }\n\n  // When axis has duplicated text, serial numbers are used to generate scale\n  return scale.domain().map(function (entry, index) {\n    return {\n      coordinate: scale(entry) + offset,\n      value: duplicateDomain ? duplicateDomain[entry] : entry,\n      index: index\n    };\n  });\n};\nexport var calculateActiveTickIndex = function calculateActiveTickIndex(coordinate, ticks) {\n  var index = -1;\n  var len = ticks.length;\n  if (len > 1) {\n    for (var i = 0; i < len; i++) {\n      if (i === 0 && coordinate <= (ticks[i].coordinate + ticks[i + 1].coordinate) / 2 || i > 0 && i < len - 1 && coordinate > (ticks[i].coordinate + ticks[i - 1].coordinate) / 2 && coordinate <= (ticks[i].coordinate + ticks[i + 1].coordinate) / 2 || i === len - 1 && coordinate > (ticks[i].coordinate + ticks[i - 1].coordinate) / 2) {\n        index = ticks[i].index;\n        break;\n      }\n    }\n  } else {\n    index = 0;\n  }\n  return index;\n};\n\n/**\n * Get the main color of each graphic item\n * @param  {ReactElement} item A graphic item\n * @return {String}            Color\n */\nexport var getMainColorOfGraphicItem = function getMainColorOfGraphicItem(item) {\n  var displayName = item.type.displayName;\n  var result = void 0;\n  switch (displayName) {\n    case 'Line':\n    case 'Area':\n      result = item.props.stroke;\n      break;\n    default:\n      result = item.props.fill;\n      break;\n  }\n  return result;\n};\nexport var getLegendProps = function getLegendProps(children, graphicItems, width) {\n  var legendItem = findChildByType(children, Legend);\n  if (!legendItem) {\n    return null;\n  }\n  var legendData = legendItem.props && legendItem.props.payload || graphicItems.map(function (child) {\n    var _child$props = child.props,\n      dataKey = _child$props.dataKey,\n      name = _child$props.name,\n      legendType = _child$props.legendType;\n    return {\n      dataKey: dataKey,\n      type: legendItem.props.iconType || legendType || 'square',\n      color: getMainColorOfGraphicItem(child),\n      value: name || dataKey,\n      payload: child.props\n    };\n  });\n  return _extends({}, legendItem.props, Legend.getWithHeight(legendItem, width), {\n    payload: legendData\n  });\n};\n/**\n * Configure the scale function of axis\n * @param {Object} scale The scale function\n * @param {Object} opts  The configuration of axis\n * @return {Object}      null\n */\nexport var getTicksOfScale = function getTicksOfScale(scale, opts) {\n  var type = opts.type,\n    tickCount = opts.tickCount,\n    originalDomain = opts.originalDomain,\n    allowDecimals = opts.allowDecimals;\n  if (opts.scale !== 'auto' && opts.scale !== 'linear') {\n    return null;\n  }\n  if (tickCount && type === 'number' && originalDomain && (originalDomain[0] === 'auto' || originalDomain[1] === 'auto')) {\n    // Calculate the ticks by the number of grid when the axis is a number axis\n    var domain = scale.domain();\n    var tickValues = getNiceTickValues(domain, tickCount, allowDecimals);\n    scale.domain(calculateDomainOfTicks(tickValues, type));\n    return {\n      niceTicks: tickValues\n    };\n  } else if (tickCount && type === 'number') {\n    var _domain = scale.domain();\n    var _tickValues = getTickValuesFixedDomain(_domain, tickCount, allowDecimals);\n    return {\n      niceTicks: _tickValues\n    };\n  }\n  return null;\n};\n\n/**\n * Calculate the size of all groups for stacked bar graph\n * @param  {Object} stackGroups The items grouped by axisId and stackId\n * @return {Object} The size of all groups\n */\nexport var getBarSizeList = function getBarSizeList(_ref) {\n  var globalSize = _ref.barSize,\n    _ref$stackGroups = _ref.stackGroups,\n    stackGroups = _ref$stackGroups === undefined ? {} : _ref$stackGroups;\n  var result = {};\n  var numericAxisIds = Object.keys(stackGroups);\n  for (var i = 0, len = numericAxisIds.length; i < len; i++) {\n    var sgs = stackGroups[numericAxisIds[i]].stackGroups;\n    var stackIds = Object.keys(sgs);\n    for (var j = 0, sLen = stackIds.length; j < sLen; j++) {\n      var _sgs$stackIds$j = sgs[stackIds[j]],\n        items = _sgs$stackIds$j.items,\n        cateAxisId = _sgs$stackIds$j.cateAxisId;\n      var barItems = items.filter(function (item) {\n        return item.type.displayName === 'Bar';\n      });\n      if (barItems && barItems.length) {\n        var selfSize = barItems[0].props.barSize;\n        var cateId = barItems[0].props[cateAxisId];\n        if (!result[cateId]) {\n          result[cateId] = [];\n        }\n        result[cateId].push({\n          item: barItems[0],\n          stackList: barItems.slice(1),\n          barSize: _isNil(selfSize) ? globalSize : selfSize\n        });\n      }\n    }\n  }\n  return result;\n};\n\n/**\n   * Calculate the size of each bar and the gap between two bars\n   * @param  {Number} bandSize  The size of each category\n   * @param  {sizeList} sizeList  The size of all groups\n   * @param  {maxBarSize} maxBarSize The maximum size of bar\n   * @return {Number} The size of each bar and the gap between two bars\n   */\nexport var getBarPosition = function getBarPosition(_ref2) {\n  var barGap = _ref2.barGap,\n    barCategoryGap = _ref2.barCategoryGap,\n    bandSize = _ref2.bandSize,\n    _ref2$sizeList = _ref2.sizeList,\n    sizeList = _ref2$sizeList === undefined ? [] : _ref2$sizeList,\n    maxBarSize = _ref2.maxBarSize;\n  var len = sizeList.length;\n  if (len < 1) return null;\n  var realBarGap = getPercentValue(barGap, bandSize, 0, true);\n  var result = void 0;\n\n  // whether or not is barSize setted by user\n  if (sizeList[0].barSize === +sizeList[0].barSize) {\n    (function () {\n      var useFull = false;\n      var fullBarSize = bandSize / len;\n      var sum = sizeList.reduce(function (res, entry) {\n        return res + entry.barSize || 0;\n      }, 0);\n      sum += (len - 1) * realBarGap;\n      if (sum >= bandSize) {\n        sum -= (len - 1) * realBarGap;\n        realBarGap = 0;\n      }\n      if (sum >= bandSize && fullBarSize > 0) {\n        useFull = true;\n        fullBarSize *= 0.9;\n        sum = len * fullBarSize;\n      }\n      var offset = (bandSize - sum) / 2 >> 0;\n      var prev = {\n        offset: offset - realBarGap,\n        size: 0\n      };\n      result = sizeList.reduce(function (res, entry) {\n        var newRes = [].concat(_toConsumableArray(res), [{\n          item: entry.item,\n          position: {\n            offset: prev.offset + prev.size + realBarGap,\n            size: useFull ? fullBarSize : entry.barSize\n          }\n        }]);\n        prev = newRes[newRes.length - 1].position;\n        if (entry.stackList && entry.stackList.length) {\n          entry.stackList.forEach(function (item) {\n            newRes.push({\n              item: item,\n              position: prev\n            });\n          });\n        }\n        return newRes;\n      }, []);\n    })();\n  } else {\n    (function () {\n      var offset = getPercentValue(barCategoryGap, bandSize, 0, true);\n      if (bandSize - 2 * offset - (len - 1) * realBarGap <= 0) {\n        realBarGap = 0;\n      }\n      var originalSize = (bandSize - 2 * offset - (len - 1) * realBarGap) / len;\n      if (originalSize > 1) {\n        originalSize >>= 0;\n      }\n      var size = maxBarSize === +maxBarSize ? Math.min(originalSize, maxBarSize) : originalSize;\n      result = sizeList.reduce(function (res, entry, i) {\n        var newRes = [].concat(_toConsumableArray(res), [{\n          item: entry.item,\n          position: {\n            offset: offset + (originalSize + realBarGap) * i + (originalSize - size) / 2,\n            size: size\n          }\n        }]);\n        if (entry.stackList && entry.stackList.length) {\n          entry.stackList.forEach(function (item) {\n            newRes.push({\n              item: item,\n              position: newRes[newRes.length - 1].position\n            });\n          });\n        }\n        return newRes;\n      }, []);\n    })();\n  }\n  return result;\n};\nexport var appendOffsetOfLegend = function appendOffsetOfLegend(offset, items, props, legendBox) {\n  var children = props.children,\n    width = props.width,\n    height = props.height,\n    margin = props.margin;\n  var legendWidth = width - (margin.left || 0) - (margin.right || 0);\n  var legendHeight = height - (margin.top || 0) - (margin.bottom || 0);\n  var legendProps = getLegendProps(children, items, legendWidth, legendHeight);\n  var newOffset = offset;\n  if (legendProps) {\n    var box = legendBox || {};\n    var align = legendProps.align,\n      verticalAlign = legendProps.verticalAlign,\n      layout = legendProps.layout;\n    if ((layout === 'vertical' || layout === 'horizontal' && verticalAlign === 'center') && isNumber(offset[align])) {\n      newOffset = _extends({}, offset, _defineProperty({}, align, newOffset[align] + (box.width || 0)));\n    }\n    if ((layout === 'horizontal' || layout === 'vertical' && align === 'center') && isNumber(offset[verticalAlign])) {\n      newOffset = _extends({}, offset, _defineProperty({}, verticalAlign, newOffset[verticalAlign] + (box.height || 0)));\n    }\n  }\n  return newOffset;\n};","map":null,"metadata":{},"sourceType":"module"}