{"ast":null,"code":"import _isNil from 'lodash/isNil';\nimport _isArray from 'lodash/isArray'; /**\n                                        * @fileOverview Default Tooltip Content\n                                        */\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _class, _class2, _temp;\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport pureRender from '../util/PureRender';\nimport { isNumOrStr } from '../util/DataUtils';\nvar defaultFormatter = function defaultFormatter(value) {\n  return _isArray(value) && isNumOrStr(value[0]) && isNumOrStr(value[1]) ? value.join(' ~ ') : value;\n};\nvar DefaultTooltipContent = pureRender(_class = (_temp = _class2 = function (_Component) {\n  _inherits(DefaultTooltipContent, _Component);\n  function DefaultTooltipContent() {\n    _classCallCheck(this, DefaultTooltipContent);\n    return _possibleConstructorReturn(this, (DefaultTooltipContent.__proto__ || Object.getPrototypeOf(DefaultTooltipContent)).apply(this, arguments));\n  }\n  _createClass(DefaultTooltipContent, [{\n    key: 'renderContent',\n    value: function renderContent() {\n      var _props = this.props,\n        payload = _props.payload,\n        separator = _props.separator,\n        formatter = _props.formatter,\n        itemStyle = _props.itemStyle,\n        itemSorter = _props.itemSorter;\n      if (payload && payload.length) {\n        var listStyle = {\n          padding: 0,\n          margin: 0\n        };\n        var items = payload.filter(function (entry) {\n          return !_isNil(entry.value);\n        }).sort(itemSorter).map(function (entry, i) {\n          var finalItemStyle = _extends({\n            display: 'block',\n            paddingTop: 4,\n            paddingBottom: 4,\n            color: entry.color || '#000'\n          }, itemStyle);\n          var finalFormatter = entry.formatter || formatter || defaultFormatter;\n          return React.createElement('li', {\n            className: 'recharts-tooltip-item',\n            key: 'tooltip-item-' + i,\n            style: finalItemStyle\n          }, entry.name ? React.createElement('span', {\n            className: 'recharts-tooltip-item-name'\n          }, entry.name) : null, entry.name ? React.createElement('span', {\n            className: 'recharts-tooltip-item-separator'\n          }, separator) : null, React.createElement('span', {\n            className: 'recharts-tooltip-item-value'\n          }, finalFormatter ? finalFormatter(entry.value, entry.name, entry, i) : entry.value), React.createElement('span', {\n            className: 'recharts-tooltip-item-unit'\n          }, entry.unit || ''));\n        });\n        return React.createElement('ul', {\n          className: 'recharts-tooltip-item-list',\n          style: listStyle\n        }, items);\n      }\n      return null;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n        labelStyle = _props2.labelStyle,\n        label = _props2.label,\n        labelFormatter = _props2.labelFormatter,\n        wrapperStyle = _props2.wrapperStyle;\n      var finalStyle = _extends({\n        margin: 0,\n        padding: 10,\n        backgroundColor: '#fff',\n        border: '1px solid #ccc',\n        whiteSpace: 'nowrap'\n      }, wrapperStyle);\n      var finalLabelStyle = _extends({\n        margin: 0\n      }, labelStyle);\n      var hasLabel = isNumOrStr(label);\n      var finalLabel = hasLabel ? label : '';\n      if (hasLabel && labelFormatter) {\n        finalLabel = labelFormatter(label);\n      }\n      return React.createElement('div', {\n        className: 'recharts-default-tooltip',\n        style: finalStyle\n      }, React.createElement('p', {\n        className: 'recharts-tooltip-label',\n        style: finalLabelStyle\n      }, finalLabel), this.renderContent());\n    }\n  }]);\n  return DefaultTooltipContent;\n}(Component), _class2.displayName = 'DefaultTooltipContent', _class2.propTypes = {\n  separator: PropTypes.string,\n  formatter: PropTypes.func,\n  wrapperStyle: PropTypes.object,\n  itemStyle: PropTypes.object,\n  labelStyle: PropTypes.object,\n  labelFormatter: PropTypes.func,\n  label: PropTypes.any,\n  payload: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.any,\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.array]),\n    unit: PropTypes.any\n  })),\n  itemSorter: PropTypes.func\n}, _class2.defaultProps = {\n  separator: ' : ',\n  itemStyle: {},\n  labelStyle: {}\n}, _temp)) || _class;\nexport default DefaultTooltipContent;","map":null,"metadata":{},"sourceType":"module"}