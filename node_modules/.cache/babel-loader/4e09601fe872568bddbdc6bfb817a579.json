{"ast":null,"code":"import _isFunction from 'lodash/isFunction';\nimport _sumBy from 'lodash/sumBy';\nimport _min from 'lodash/min';\nimport _maxBy from 'lodash/maxBy';\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _class, _class2, _temp;\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * @file TreemapChart\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Surface from '../container/Surface';\nimport Layer from '../container/Layer';\nimport Tooltip from '../component/Tooltip';\nimport Rectangle from '../shape/Rectangle';\nimport pureRender, { shallowEqual } from '../util/PureRender';\nimport { PRESENTATION_ATTRIBUTES, getPresentationAttributes, EVENT_ATTRIBUTES, filterSvgElements, validateWidthHeight, findChildByType } from '../util/ReactUtils';\nimport { getValueByDataKey } from '../util/DataUtils';\nvar defaultCoordinateOfTooltip = {\n  x: 0,\n  y: 0\n};\nvar interpolationGenerator = function interpolationGenerator(a, b) {\n  var ka = +a;\n  var kb = b - ka;\n  return function (t) {\n    return ka + kb * t;\n  };\n};\nvar centerY = function centerY(node) {\n  return node.y + node.dy / 2;\n};\nvar getValue = function getValue(entry) {\n  return entry && entry.value || 0;\n};\nvar getSumOfIds = function getSumOfIds(links, ids) {\n  return ids.reduce(function (result, id) {\n    return result + getValue(links[id]);\n  }, 0);\n};\nvar getSumWithWeightedSource = function getSumWithWeightedSource(tree, links, ids) {\n  return ids.reduce(function (result, id) {\n    var link = links[id];\n    var sourceNode = tree[link.source];\n    return result + centerY(sourceNode) * getValue(links[id]);\n  }, 0);\n};\nvar getSumWithWeightedTarget = function getSumWithWeightedTarget(tree, links, ids) {\n  return ids.reduce(function (result, id) {\n    var link = links[id];\n    var targetNode = tree[link.target];\n    return result + centerY(targetNode) * getValue(links[id]);\n  }, 0);\n};\nvar ascendingY = function ascendingY(a, b) {\n  return a.y - b.y;\n};\nvar searchTargetsAndSources = function searchTargetsAndSources(links, id) {\n  var sourceNodes = [];\n  var sourceLinks = [];\n  var targetNodes = [];\n  var targetLinks = [];\n  for (var i = 0, len = links.length; i < len; i++) {\n    var link = links[i];\n    if (link.source === id) {\n      targetNodes.push(link.target);\n      targetLinks.push(i);\n    }\n    if (link.target === id) {\n      sourceNodes.push(link.source);\n      sourceLinks.push(i);\n    }\n  }\n  return {\n    sourceNodes: sourceNodes,\n    sourceLinks: sourceLinks,\n    targetLinks: targetLinks,\n    targetNodes: targetNodes\n  };\n};\nvar updateDepthOfTargets = function updateDepthOfTargets(tree, curNode) {\n  var targetNodes = curNode.targetNodes;\n  for (var i = 0, len = targetNodes.length; i < len; i++) {\n    var target = tree[targetNodes[i]];\n    if (target) {\n      target.depth = Math.max(curNode.depth + 1, target.depth);\n      updateDepthOfTargets(tree, target);\n    }\n  }\n};\nvar getNodesTree = function getNodesTree(_ref, width, nodeWidth) {\n  var nodes = _ref.nodes,\n    links = _ref.links;\n  var tree = nodes.map(function (entry, index) {\n    var result = searchTargetsAndSources(links, index);\n    return _extends({}, entry, result, {\n      value: Math.max(getSumOfIds(links, result.sourceLinks), getSumOfIds(links, result.targetLinks)),\n      depth: 0\n    });\n  });\n  for (var i = 0, len = tree.length; i < len; i++) {\n    var node = tree[i];\n    if (!node.sourceNodes.length) {\n      updateDepthOfTargets(tree, node);\n    }\n  }\n  var maxDepth = _maxBy(tree, function (entry) {\n    return entry.depth;\n  }).depth;\n  if (maxDepth >= 1) {\n    var childWidth = (width - nodeWidth) / maxDepth;\n    for (var _i = 0, _len = tree.length; _i < _len; _i++) {\n      var _node = tree[_i];\n      if (!_node.targetNodes.length) {\n        _node.depth = maxDepth;\n      }\n      _node.x = _node.depth * childWidth;\n      _node.dx = nodeWidth;\n    }\n  }\n  return {\n    tree: tree,\n    maxDepth: maxDepth\n  };\n};\nvar getDepthTree = function getDepthTree(tree) {\n  var result = [];\n  for (var i = 0, len = tree.length; i < len; i++) {\n    var node = tree[i];\n    if (!result[node.depth]) {\n      result[node.depth] = [];\n    }\n    result[node.depth].push(node);\n  }\n  return result;\n};\nvar updateYOfTree = function updateYOfTree(depthTree, height, nodePadding, links) {\n  var yRatio = _min(depthTree.map(function (nodes) {\n    return (height - (nodes.length - 1) * nodePadding) / _sumBy(nodes, getValue);\n  }));\n  for (var d = 0, maxDepth = depthTree.length; d < maxDepth; d++) {\n    for (var i = 0, len = depthTree[d].length; i < len; i++) {\n      var node = depthTree[d][i];\n      node.y = i;\n      node.dy = node.value * yRatio;\n    }\n  }\n  return links.map(function (link) {\n    return _extends({}, link, {\n      dy: getValue(link) * yRatio\n    });\n  });\n};\nvar resolveCollisions = function resolveCollisions(depthTree, height, nodePadding) {\n  for (var i = 0, len = depthTree.length; i < len; i++) {\n    var nodes = depthTree[i];\n    var n = nodes.length;\n\n    // Sort by the value of y\n    nodes.sort(ascendingY);\n    var y0 = 0;\n    for (var j = 0; j < n; j++) {\n      var node = nodes[j];\n      var dy = y0 - node.y;\n      if (dy > 0) {\n        node.y += dy;\n      }\n      y0 = node.y + node.dy + nodePadding;\n    }\n    y0 = height + nodePadding;\n    for (var _j = n - 1; _j >= 0; _j--) {\n      var _node2 = nodes[_j];\n      var _dy = _node2.y + _node2.dy + nodePadding - y0;\n      if (_dy > 0) {\n        _node2.y -= _dy;\n        y0 = _node2.y;\n      } else {\n        break;\n      }\n    }\n  }\n};\nvar relaxLeftToRight = function relaxLeftToRight(tree, depthTree, links, alpha) {\n  for (var i = 0, maxDepth = depthTree.length; i < maxDepth; i++) {\n    var nodes = depthTree[i];\n    for (var j = 0, len = nodes.length; j < len; j++) {\n      var node = nodes[j];\n      if (node.sourceLinks.length) {\n        var sourceSum = getSumOfIds(links, node.sourceLinks);\n        var weightedSum = getSumWithWeightedSource(tree, links, node.sourceLinks);\n        var y = weightedSum / sourceSum;\n        node.y += (y - centerY(node)) * alpha;\n      }\n    }\n  }\n};\nvar relaxRightToLeft = function relaxRightToLeft(tree, depthTree, links, alpha) {\n  for (var i = depthTree.length - 1; i >= 0; i--) {\n    var nodes = depthTree[i];\n    for (var j = 0, len = nodes.length; j < len; j++) {\n      var node = nodes[j];\n      if (node.targetLinks.length) {\n        var targetSum = getSumOfIds(links, node.targetLinks);\n        var weightedSum = getSumWithWeightedTarget(tree, links, node.targetLinks);\n        var y = weightedSum / targetSum;\n        node.y += (y - centerY(node)) * alpha;\n      }\n    }\n  }\n};\nvar updateYOfLinks = function updateYOfLinks(tree, links) {\n  for (var i = 0, len = tree.length; i < len; i++) {\n    var node = tree[i];\n    var sy = 0;\n    var ty = 0;\n    node.targetLinks.sort(function (a, b) {\n      return tree[links[a].target].y - tree[links[b].target].y;\n    });\n    node.sourceLinks.sort(function (a, b) {\n      return tree[links[a].source].y - tree[links[b].source].y;\n    });\n    for (var j = 0, tLen = node.targetLinks.length; j < tLen; j++) {\n      var link = links[node.targetLinks[j]];\n      if (link) {\n        link.sy = sy;\n        sy += link.dy;\n      }\n    }\n    for (var _j2 = 0, sLen = node.sourceLinks.length; _j2 < sLen; _j2++) {\n      var _link = links[node.sourceLinks[_j2]];\n      if (_link) {\n        _link.ty = ty;\n        ty += _link.dy;\n      }\n    }\n  }\n};\nvar computeData = function computeData(_ref2) {\n  var data = _ref2.data,\n    width = _ref2.width,\n    height = _ref2.height,\n    iterations = _ref2.iterations,\n    nodeWidth = _ref2.nodeWidth,\n    nodePadding = _ref2.nodePadding;\n  var links = data.links;\n  var _getNodesTree = getNodesTree(data, width, nodeWidth),\n    tree = _getNodesTree.tree;\n  var depthTree = getDepthTree(tree);\n  var newLinks = updateYOfTree(depthTree, height, nodePadding, links);\n  resolveCollisions(depthTree, height, nodePadding);\n  var alpha = 1;\n  for (var i = 1; i <= iterations; i++) {\n    relaxRightToLeft(tree, depthTree, newLinks, alpha *= 0.99);\n    resolveCollisions(depthTree, height, nodePadding);\n    relaxLeftToRight(tree, depthTree, newLinks, alpha);\n    resolveCollisions(depthTree, height, nodePadding);\n  }\n  updateYOfLinks(tree, newLinks);\n  return {\n    nodes: tree,\n    links: newLinks\n  };\n};\nvar getCoordinateOfTooltip = function getCoordinateOfTooltip(el, type) {\n  if (type === 'node') {\n    return {\n      x: el.x + el.width / 2,\n      y: el.y + el.height / 2\n    };\n  }\n  return {\n    x: (el.sourceX + el.targetX) / 2,\n    y: (el.sourceY + el.targetY) / 2\n  };\n};\nvar getPayloadOfTooltip = function getPayloadOfTooltip(el, type, nameKey) {\n  var payload = el.payload;\n  if (type === 'node') {\n    return [{\n      payload: el,\n      name: getValueByDataKey(payload, nameKey, ''),\n      value: getValueByDataKey(payload, 'value')\n    }];\n  }\n  if (payload.source && payload.target) {\n    var sourceName = getValueByDataKey(payload.source, nameKey, '');\n    var targetName = getValueByDataKey(payload.target, nameKey, '');\n    return [{\n      payload: el,\n      name: sourceName + ' - ' + targetName,\n      value: getValueByDataKey(payload, 'value')\n    }];\n  }\n  return [];\n};\nvar Sankey = pureRender(_class = (_temp = _class2 = function (_Component) {\n  _inherits(Sankey, _Component);\n  function Sankey(props) {\n    _classCallCheck(this, Sankey);\n    var _this = _possibleConstructorReturn(this, (Sankey.__proto__ || Object.getPrototypeOf(Sankey)).call(this, props));\n    _this.state = _this.createDefaultState(props);\n    return _this;\n  }\n  _createClass(Sankey, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var _props = this.props,\n        data = _props.data,\n        width = _props.width,\n        height = _props.height,\n        margin = _props.margin,\n        iterations = _props.iterations,\n        nodeWidth = _props.nodeWidth,\n        nodePadding = _props.nodePadding,\n        nameKey = _props.nameKey;\n      if (nextProps.data !== data || nextProps.width !== width || nextProps.height !== height || !shallowEqual(nextProps.margin, margin) || nextProps.iterations !== iterations || nextProps.nodeWidth !== nodeWidth || nextProps.nodePadding !== nodePadding || nextProps.nameKey !== nameKey) {\n        this.setState(this.createDefaultState(this.props));\n      }\n    }\n    /**\n     * Returns default, reset state for the sankey chart.\n     * @param  {Object} props The latest props\n     * @return {Object} Whole new state\n     */\n  }, {\n    key: 'createDefaultState',\n    value: function createDefaultState(props) {\n      var data = props.data,\n        width = props.width,\n        height = props.height,\n        margin = props.margin,\n        iterations = props.iterations,\n        nodeWidth = props.nodeWidth,\n        nodePadding = props.nodePadding;\n      var contentWidth = width - (margin && margin.left || 0) - (margin && margin.right || 0);\n      var contentHeight = height - (margin && margin.top || 0) - (margin && margin.bottom || 0);\n      var _computeData = computeData({\n          data: data,\n          width: contentWidth,\n          height: contentHeight,\n          iterations: iterations,\n          nodeWidth: nodeWidth,\n          nodePadding: nodePadding\n        }),\n        links = _computeData.links,\n        nodes = _computeData.nodes;\n      return {\n        activeElement: null,\n        activeElementType: null,\n        isTooltipActive: false,\n        nodes: nodes,\n        links: links\n      };\n    }\n  }, {\n    key: 'handleMouseEnter',\n    value: function handleMouseEnter(el, type, e) {\n      var _props2 = this.props,\n        onMouseEnter = _props2.onMouseEnter,\n        children = _props2.children;\n      var tooltipItem = findChildByType(children, Tooltip);\n      if (tooltipItem) {\n        this.setState({\n          activeElement: el,\n          activeElementType: type,\n          isTooltipActive: true\n        }, function () {\n          if (onMouseEnter) {\n            onMouseEnter(el, type, e);\n          }\n        });\n      } else if (onMouseEnter) {\n        onMouseEnter(el, type, e);\n      }\n    }\n  }, {\n    key: 'handleMouseLeave',\n    value: function handleMouseLeave(el, type, e) {\n      var _props3 = this.props,\n        onMouseLeave = _props3.onMouseLeave,\n        children = _props3.children;\n      var tooltipItem = findChildByType(children, Tooltip);\n      if (tooltipItem) {\n        this.setState({\n          isTooltipActive: false\n        }, function () {\n          if (onMouseLeave) {\n            onMouseLeave(el, type, e);\n          }\n        });\n      } else if (onMouseLeave) {\n        onMouseLeave(el, type, e);\n      }\n    }\n  }, {\n    key: 'renderLinkItem',\n    value: function renderLinkItem(option, props) {\n      if (React.isValidElement(option)) {\n        return React.cloneElement(option, props);\n      } else if (_isFunction(option)) {\n        return option(props);\n      }\n      var sourceX = props.sourceX,\n        sourceY = props.sourceY,\n        sourceControlX = props.sourceControlX,\n        targetX = props.targetX,\n        targetY = props.targetY,\n        targetControlX = props.targetControlX,\n        linkWidth = props.linkWidth,\n        others = _objectWithoutProperties(props, ['sourceX', 'sourceY', 'sourceControlX', 'targetX', 'targetY', 'targetControlX', 'linkWidth']);\n      return React.createElement('path', _extends({\n        className: 'recharts-sankey-link',\n        d: '\\n          M' + sourceX + ',' + sourceY + '\\n          C' + sourceControlX + ',' + sourceY + ' ' + targetControlX + ',' + targetY + ' ' + targetX + ',' + targetY + '\\n        ',\n        fill: 'none',\n        stroke: '#333',\n        strokeWidth: linkWidth,\n        strokeOpacity: '0.2'\n      }, getPresentationAttributes(others)));\n    }\n  }, {\n    key: 'renderLinks',\n    value: function renderLinks(links, nodes) {\n      var _this2 = this;\n      var _props4 = this.props,\n        linkCurvature = _props4.linkCurvature,\n        linkContent = _props4.link,\n        margin = _props4.margin;\n      var top = margin.top || 0;\n      var left = margin.left || 0;\n      return React.createElement(Layer, {\n        className: 'recharts-sankey-links',\n        key: 'recharts-sankey-links'\n      }, links.map(function (link, i) {\n        var sourceRelativeY = link.sy,\n          targetRelativeY = link.ty,\n          linkWidth = link.dy;\n        var source = nodes[link.source];\n        var target = nodes[link.target];\n        var sourceX = source.x + source.dx + left;\n        var targetX = target.x + left;\n        var interpolationFunc = interpolationGenerator(sourceX, targetX);\n        var sourceControlX = interpolationFunc(linkCurvature);\n        var targetControlX = interpolationFunc(1 - linkCurvature);\n        var sourceY = source.y + sourceRelativeY + linkWidth / 2 + top;\n        var targetY = target.y + targetRelativeY + linkWidth / 2 + top;\n        var linkProps = _extends({\n          sourceX: sourceX,\n          targetX: targetX,\n          sourceY: sourceY,\n          targetY: targetY,\n          sourceControlX: sourceControlX,\n          targetControlX: targetControlX,\n          sourceRelativeY: sourceRelativeY,\n          targetRelativeY: targetRelativeY,\n          linkWidth: linkWidth,\n          index: i,\n          payload: _extends({}, link, {\n            source: source,\n            target: target\n          })\n        }, getPresentationAttributes(linkContent));\n        var events = {\n          onMouseEnter: _this2.handleMouseEnter.bind(_this2, linkProps, 'link'),\n          onMouseLeave: _this2.handleMouseLeave.bind(_this2, linkProps, 'link')\n        };\n        return React.createElement(Layer, _extends({\n          key: 'link' + i\n        }, events), _this2.renderLinkItem(linkContent, linkProps));\n      }));\n    }\n  }, {\n    key: 'renderNodeItem',\n    value: function renderNodeItem(option, props) {\n      if (React.isValidElement(option)) {\n        return React.cloneElement(option, props);\n      } else if (_isFunction(option)) {\n        return option(props);\n      }\n      return React.createElement(Rectangle, _extends({\n        className: 'recharts-sankey-node',\n        fill: '#0088fe',\n        fillOpacity: '0.8'\n      }, props));\n    }\n  }, {\n    key: 'renderNodes',\n    value: function renderNodes(nodes) {\n      var _this3 = this;\n      var _props5 = this.props,\n        nodeContent = _props5.node,\n        margin = _props5.margin;\n      var top = margin.top || 0;\n      var left = margin.left || 0;\n      return React.createElement(Layer, {\n        className: 'recharts-sankey-nodes',\n        key: 'recharts-sankey-nodes'\n      }, nodes.map(function (node, i) {\n        var x = node.x,\n          y = node.y,\n          dx = node.dx,\n          dy = node.dy;\n        var nodeProps = _extends({}, getPresentationAttributes(nodeContent), {\n          x: x + left,\n          y: y + top,\n          width: dx,\n          height: dy,\n          index: i,\n          payload: node\n        });\n        var events = {\n          onMouseEnter: _this3.handleMouseEnter.bind(_this3, nodeProps, 'node'),\n          onMouseLeave: _this3.handleMouseLeave.bind(_this3, nodeProps, 'node')\n        };\n        return React.createElement(Layer, _extends({\n          key: 'node' + i\n        }, events), _this3.renderNodeItem(nodeContent, nodeProps));\n      }));\n    }\n  }, {\n    key: 'renderTooltip',\n    value: function renderTooltip() {\n      var _props6 = this.props,\n        children = _props6.children,\n        width = _props6.width,\n        height = _props6.height,\n        nameKey = _props6.nameKey;\n      var tooltipItem = findChildByType(children, Tooltip);\n      if (!tooltipItem) {\n        return null;\n      }\n      var _state = this.state,\n        isTooltipActive = _state.isTooltipActive,\n        activeElement = _state.activeElement,\n        activeElementType = _state.activeElementType;\n      var viewBox = {\n        x: 0,\n        y: 0,\n        width: width,\n        height: height\n      };\n      var coordinate = activeElement ? getCoordinateOfTooltip(activeElement, activeElementType) : defaultCoordinateOfTooltip;\n      var payload = activeElement ? getPayloadOfTooltip(activeElement, activeElementType, nameKey) : [];\n      return React.cloneElement(tooltipItem, {\n        viewBox: viewBox,\n        active: isTooltipActive,\n        coordinate: coordinate,\n        label: '',\n        payload: payload\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      if (!validateWidthHeight(this)) {\n        return null;\n      }\n      var _props7 = this.props,\n        width = _props7.width,\n        height = _props7.height,\n        className = _props7.className,\n        style = _props7.style,\n        children = _props7.children,\n        others = _objectWithoutProperties(_props7, ['width', 'height', 'className', 'style', 'children']);\n      var _state2 = this.state,\n        links = _state2.links,\n        nodes = _state2.nodes;\n      var attrs = getPresentationAttributes(others);\n      return React.createElement('div', {\n        className: classNames('recharts-wrapper', className),\n        style: _extends({}, style, {\n          position: 'relative',\n          cursor: 'default',\n          width: width,\n          height: height\n        })\n      }, React.createElement(Surface, _extends({}, attrs, {\n        width: width,\n        height: height\n      }), filterSvgElements(children), this.renderLinks(links, nodes), this.renderNodes(nodes)), this.renderTooltip());\n    }\n  }]);\n  return Sankey;\n}(Component), _class2.displayName = 'Sankey', _class2.propTypes = _extends({}, PRESENTATION_ATTRIBUTES, EVENT_ATTRIBUTES, {\n  nameKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.func]),\n  dataKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.func]),\n  width: PropTypes.number,\n  height: PropTypes.number,\n  data: PropTypes.shape({\n    nodes: PropTypes.array,\n    links: PropTypes.arrayOf(PropTypes.shape({\n      target: PropTypes.number,\n      source: PropTypes.number,\n      value: PropTypes.number\n    }))\n  }),\n  nodePadding: PropTypes.number,\n  nodeWidth: PropTypes.number,\n  linkCurvature: PropTypes.number,\n  iterations: PropTypes.number,\n  node: PropTypes.oneOfType([PropTypes.object, PropTypes.element, PropTypes.func]),\n  link: PropTypes.oneOfType([PropTypes.object, PropTypes.element, PropTypes.func]),\n  style: PropTypes.object,\n  className: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  margin: PropTypes.shape({\n    top: PropTypes.number,\n    right: PropTypes.number,\n    bottom: PropTypes.number,\n    left: PropTypes.number\n  })\n}), _class2.defaultProps = {\n  nodePadding: 10,\n  nodeWidth: 10,\n  nameKey: 'name',\n  dataKey: 'value',\n  linkCurvature: 0.5,\n  iterations: 32,\n  margin: {\n    top: 5,\n    right: 5,\n    bottom: 5,\n    left: 5\n  }\n}, _temp)) || _class;\nexport default Sankey;","map":null,"metadata":{},"sourceType":"module"}