{"ast":null,"code":"import _range from 'lodash/range';\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _class, _class2, _temp2;\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n  return target;\n}\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * @fileOverview Radar Bar Chart\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { scaleBand } from 'd3-scale';\nimport Surface from '../container/Surface';\nimport RadialBar from '../polar/RadialBar';\nimport { getPercentValue, combineEventHandlers, getValueByDataKey, findPositionOfBar } from '../util/DataUtils';\nimport Cell from '../component/Cell';\nimport Legend from '../component/Legend';\nimport Tooltip from '../component/Tooltip';\nimport { findChildByType, findAllByType, validateWidthHeight, filterSvgElements, getPresentationAttributes } from '../util/ReactUtils';\nimport { getMaxRadius, polarToCartesian } from '../util/PolarUtils';\nimport pureRender from '../util/PureRender';\nvar RadialBarChart = pureRender(_class = (_temp2 = _class2 = function (_Component) {\n  _inherits(RadialBarChart, _Component);\n  function RadialBarChart() {\n    var _ref;\n    var _temp, _this, _ret;\n    _classCallCheck(this, RadialBarChart);\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RadialBarChart.__proto__ || Object.getPrototypeOf(RadialBarChart)).call.apply(_ref, [this].concat(args))), _this), _this.state = _this.createDefaultState(), _this.handleMouseEnter = function (el) {\n      var children = _this.props.children;\n      var cx = el.cx,\n        cy = el.cy,\n        endAngle = el.endAngle,\n        outerRadius = el.outerRadius;\n      var tooltipItem = findChildByType(children, Tooltip);\n      if (tooltipItem) {\n        _this.setState({\n          isTooltipActive: true,\n          activeTooltipCoord: polarToCartesian(cx, cy, outerRadius, endAngle),\n          activeTooltipPayload: [el.payload]\n        });\n      }\n    }, _this.handleMouseLeave = function () {\n      var children = _this.props.children;\n      var tooltipItem = findChildByType(children, Tooltip);\n      if (tooltipItem) {\n        _this.setState({\n          isTooltipActive: false\n        });\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n  _createClass(RadialBarChart, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.data !== this.props.data) {\n        this.setState(this.createDefaultState());\n      }\n    }\n    /**\n     * Compose the data of each group\n     * @param  {Object} item        An instance of RadialBar\n     * @param  {Array}  barPosition The offset and size of each bar\n     * @param  {Object} radiusScale The scale function of radius of bars\n     * @param  {Object} center      The coordinate of center\n     * @param  {String} dataKey     The unique key of a group\n     * @return {Array}              Composed data\n     */\n  }, {\n    key: 'getComposedData',\n    value: function getComposedData(item, barPosition, radiusScale, center, dataKey) {\n      var data = this.props.data;\n      var pos = findPositionOfBar(barPosition, item);\n      var cells = findAllByType(item.props.children, Cell);\n      return data.map(function (entry, index) {\n        var value = getValueByDataKey(entry, dataKey);\n        var radius = radiusScale(index);\n        return _extends({}, entry, center, {\n          value: value,\n          innerRadius: radius - pos.offset,\n          outerRadius: radius - pos.offset + pos.radius,\n          payload: entry\n        }, cells && cells[index] && cells[index].props);\n      });\n    }\n    /**\n     * Calculate the size of all groups\n     * @param  {Array} items All the instance of RadialBar\n     * @return {Object} The size of all groups\n     */\n  }, {\n    key: 'getRadiusList',\n    value: function getRadiusList(items) {\n      var barSize = this.props.barSize;\n      return items.map(function (child) {\n        return _extends({}, child.props, {\n          item: child,\n          barSize: child.props.barSize || barSize\n        });\n      });\n    }\n\n    /**\n     * Calculate the scale function of radius\n     * @param {Number} innerRadius The outer radius\n     * @param {Number} outerRadius The inner radius\n     * @return {Object}            A scale function\n     */\n  }, {\n    key: 'getRadiusScale',\n    value: function getRadiusScale(innerRadius, outerRadius) {\n      var data = this.props.data;\n      var bandCount = Math.max(data.length, 1);\n      var range = [outerRadius, innerRadius];\n      var scale = scaleBand().domain(_range(0, bandCount)).range(range);\n      return scale;\n    }\n\n    /**\n     * Calculate the size of each bar and the gap between two bars\n     * @param  {Number} bandRadius  The radius of each category\n     * @param  {Array} radiusList   The radius of all groups\n     * @return {Number} The size of each bar and the gap between two bars\n     */\n  }, {\n    key: 'getBarPosition',\n    value: function getBarPosition(bandRadius, radiusList) {\n      var _props = this.props,\n        barGap = _props.barGap,\n        barCategoryGap = _props.barCategoryGap;\n      var len = radiusList.length;\n      var result = void 0;\n\n      // whether or not is barSize setted by user\n      if (len && radiusList[0].barSize === +radiusList[0].barSize) {\n        (function () {\n          var sum = radiusList.reduce(function (res, entry) {\n            return res + entry.barSize;\n          }, 0);\n          sum += (len - 1) * barGap;\n          var offset = -sum / 2 >> 0;\n          var prev = {\n            offset: offset - barGap,\n            radius: 0\n          };\n          result = radiusList.reduce(function (res, entry) {\n            prev = {\n              offset: prev.offset + prev.radius + barGap,\n              radius: entry.barSize\n            };\n            return [].concat(_toConsumableArray(res), [{\n              item: entry.item,\n              position: prev\n            }]);\n          }, []);\n        })();\n      } else {\n        (function () {\n          var offset = getPercentValue(barCategoryGap, bandRadius);\n          var radius = (bandRadius - 2 * offset - (len - 1) * barGap) / len >> 0;\n          offset = -Math.max((radius * len + (len - 1) * barGap) / 2 >> 0, 0);\n          result = radiusList.reduce(function (res, entry, i) {\n            return [].concat(_toConsumableArray(res), [{\n              item: entry.item,\n              position: {\n                offset: offset + (radius + barGap) * i,\n                radius: radius\n              }\n            }]);\n          }, []);\n        })();\n      }\n      return result;\n    }\n    /**\n     * Returns default, reset state for the radial bar chart.\n     * @return {Object} Whole new state\n     */\n  }, {\n    key: 'createDefaultState',\n    value: function createDefaultState() {\n      return {\n        activeTooltipLabel: '',\n        activeTooltipPayload: [],\n        activeTooltipCoord: {\n          x: 0,\n          y: 0\n        },\n        isTooltipActive: false\n      };\n    }\n  }, {\n    key: 'renderLegend',\n    /**\n     * Draw legend\n     * @param  {ReactElement} legendItem The instance of Legend\n     * @return {ReactElement}            The instance of Legend\n     */\n    value: function renderLegend() {\n      var children = this.props.children;\n      var legendItem = findChildByType(children, Legend);\n      if (!legendItem) {\n        return null;\n      }\n      var _props2 = this.props,\n        data = _props2.data,\n        width = _props2.width,\n        height = _props2.height,\n        margin = _props2.margin;\n      var legendData = legendItem.props && legendItem.props.payload || data.map(function (entry) {\n        return {\n          type: legendItem.props.iconType || 'square',\n          color: entry.fill || '#000',\n          value: entry.name,\n          payload: entry\n        };\n      });\n      return React.cloneElement(legendItem, _extends({}, Legend.getWithHeight(legendItem, width), {\n        payload: legendData,\n        chartWidth: width,\n        chartHeight: height,\n        margin: margin\n      }));\n    }\n  }, {\n    key: 'renderTooltip',\n    value: function renderTooltip() {\n      var children = this.props.children;\n      var tooltipItem = findChildByType(children, Tooltip);\n      if (!tooltipItem) {\n        return null;\n      }\n      var _props3 = this.props,\n        width = _props3.width,\n        height = _props3.height;\n      var _state = this.state,\n        isTooltipActive = _state.isTooltipActive,\n        activeTooltipLabel = _state.activeTooltipLabel,\n        activeTooltipCoord = _state.activeTooltipCoord,\n        activeTooltipPayload = _state.activeTooltipPayload;\n      var viewBox = {\n        x: 0,\n        y: 0,\n        width: width,\n        height: height\n      };\n      return React.cloneElement(tooltipItem, {\n        viewBox: viewBox,\n        active: isTooltipActive,\n        label: activeTooltipLabel,\n        payload: activeTooltipPayload,\n        coordinate: activeTooltipCoord\n      });\n    }\n\n    /**\n     * Draw the main part of bar chart\n     * @param  {Array} items     All the instance of RadialBar\n     * @param  {Object} radiusScale The scale function of radius of bars\n     * @param  {Object} center      The coordinate of center\n     * @return {ReactComponent}  All the instances of RadialBar\n     */\n  }, {\n    key: 'renderItems',\n    value: function renderItems(items, radiusScale, center) {\n      var _this2 = this;\n      if (!items || !items.length) {\n        return null;\n      }\n      var _props4 = this.props,\n        onMouseEnter = _props4.onMouseEnter,\n        onMouseLeave = _props4.onMouseLeave,\n        onClick = _props4.onClick;\n      var radiusList = this.getRadiusList(items);\n      var bandRadius = radiusScale.bandwidth();\n      var barPosition = this.getBarPosition(bandRadius, radiusList);\n      return items.map(function (child, i) {\n        var _child$props = child.props,\n          dataKey = _child$props.dataKey,\n          childOnMouseEnter = _child$props.onMouseEnter,\n          childOnMouseLeave = _child$props.onMouseLeave,\n          childOnClick = _child$props.onClick;\n        return React.cloneElement(child, _extends({}, center, {\n          key: child.key || 'radial-bar-' + i,\n          onMouseEnter: combineEventHandlers(_this2.handleMouseEnter, onMouseEnter, childOnMouseEnter),\n          onMouseLeave: combineEventHandlers(_this2.handleMouseLeave, onMouseLeave, childOnMouseLeave),\n          onClick: combineEventHandlers(null, onClick, childOnClick),\n          data: _this2.getComposedData(child, barPosition, radiusScale, center, dataKey)\n        }));\n      }, this);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var data = this.props.data;\n      if (!validateWidthHeight(this) || !data || !data.length) {\n        return null;\n      }\n      var _props5 = this.props,\n        style = _props5.style,\n        children = _props5.children,\n        className = _props5.className,\n        width = _props5.width,\n        height = _props5.height,\n        margin = _props5.margin,\n        others = _objectWithoutProperties(_props5, ['style', 'children', 'className', 'width', 'height', 'margin']);\n      var items = findAllByType(children, RadialBar);\n      var cx = getPercentValue(this.props.cx, width, width / 2);\n      var cy = getPercentValue(this.props.cy, height, height / 2);\n      var maxRadius = getMaxRadius(width, height, margin);\n      var innerRadius = getPercentValue(this.props.innerRadius, maxRadius, 0);\n      var outerRadius = getPercentValue(this.props.outerRadius, maxRadius, maxRadius * 0.8);\n      var radiusScale = this.getRadiusScale(innerRadius, outerRadius);\n      var attrs = getPresentationAttributes(others);\n      return React.createElement('div', {\n        className: classNames('recharts-wrapper', className),\n        style: _extends({}, style, {\n          cursor: 'default',\n          position: 'relative',\n          width: width,\n          height: height\n        })\n      }, React.createElement(Surface, _extends({}, attrs, {\n        width: width,\n        height: height\n      }), this.renderItems(items, radiusScale, {\n        cx: cx,\n        cy: cy\n      }), filterSvgElements(children)), this.renderLegend(), this.renderTooltip(items));\n    }\n  }]);\n  return RadialBarChart;\n}(Component), _class2.displayName = 'RadialBarChart', _class2.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  margin: PropTypes.shape({\n    top: PropTypes.number,\n    right: PropTypes.number,\n    bottom: PropTypes.number,\n    left: PropTypes.number\n  }),\n  cy: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  cx: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  data: PropTypes.array,\n  innerRadius: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  outerRadius: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  // The offset radius between two categorys\n  barCategoryGap: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  // The gap radius of two radial bar in one category\n  barGap: PropTypes.number,\n  // The radius of each radial bar\n  barSize: PropTypes.number,\n  title: PropTypes.string,\n  style: PropTypes.object,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onClick: PropTypes.func,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  className: PropTypes.string\n}, _class2.defaultProps = {\n  cx: '50%',\n  cy: '50%',\n  innerRadius: '30%',\n  outerRadius: '90%',\n  barGap: 2,\n  barCategoryGap: '10%',\n  style: {},\n  margin: {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  }\n}, _temp2)) || _class;\nexport default RadialBarChart;","map":null,"metadata":{},"sourceType":"module"}