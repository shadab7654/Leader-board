{"ast":null,"code":"import { ticks, tickStep } from \"d3-array\";\nimport { interpolateNumber as reinterpolate } from \"d3-interpolate\";\nimport { default as continuous, copy, deinterpolateLinear as deinterpolate } from \"./continuous\";\nimport tickFormat from \"./tickFormat\";\nexport function linearish(scale) {\n  var domain = scale.domain;\n  scale.ticks = function (count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n  scale.tickFormat = function (count, specifier) {\n    return tickFormat(domain(), count, specifier);\n  };\n  scale.nice = function (count) {\n    var d = domain(),\n      i = d.length - 1,\n      n = count == null ? 10 : count,\n      start = d[0],\n      stop = d[i],\n      step = tickStep(start, stop, n);\n    if (step) {\n      step = tickStep(Math.floor(start / step) * step, Math.ceil(stop / step) * step, n);\n      d[0] = Math.floor(start / step) * step;\n      d[i] = Math.ceil(stop / step) * step;\n      domain(d);\n    }\n    return scale;\n  };\n  return scale;\n}\nexport default function linear() {\n  var scale = continuous(deinterpolate, reinterpolate);\n  scale.copy = function () {\n    return copy(scale, linear());\n  };\n  return linearish(scale);\n}","map":null,"metadata":{},"sourceType":"module"}