{"ast":null,"code":"import _isFunction from 'lodash/isFunction';\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _class, _class2, _temp;\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * @fileOverview Reference Line\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport pureRender from '../util/PureRender';\nimport Layer from '../container/Layer';\nimport Text from '../component/Text';\nimport { PRESENTATION_ATTRIBUTES, getPresentationAttributes, filterEventAttributes } from '../util/ReactUtils';\nimport { validateCoordinateInRange, isNumOrStr } from '../util/DataUtils';\nvar renderLine = function renderLine(option, props) {\n  var line = void 0;\n  if (React.isValidElement(option)) {\n    line = React.cloneElement(option, props);\n  } else if (_isFunction(option)) {\n    line = option(props);\n  } else {\n    line = React.createElement('line', _extends({}, props, {\n      className: 'recharts-reference-line-line'\n    }));\n  }\n  return line;\n};\nvar ReferenceLine = pureRender(_class = (_temp = _class2 = function (_Component) {\n  _inherits(ReferenceLine, _Component);\n  function ReferenceLine() {\n    _classCallCheck(this, ReferenceLine);\n    return _possibleConstructorReturn(this, (ReferenceLine.__proto__ || Object.getPrototypeOf(ReferenceLine)).apply(this, arguments));\n  }\n  _createClass(ReferenceLine, [{\n    key: 'getEndPoints',\n    value: function getEndPoints(isX, isY) {\n      var _props = this.props,\n        xAxis = _props.xAxis,\n        yAxis = _props.yAxis,\n        viewBox = _props.viewBox;\n      var x = viewBox.x,\n        y = viewBox.y,\n        width = viewBox.width,\n        height = viewBox.height;\n      if (isY) {\n        var value = this.props.y;\n        var scale = yAxis.scale;\n        var offset = scale.bandwidth ? scale.bandwidth() / 2 : 0;\n        var coord = scale(value) + offset;\n        if (validateCoordinateInRange(coord, scale)) {\n          return yAxis.orientation === 'left' ? [{\n            x: x,\n            y: coord\n          }, {\n            x: x + width,\n            y: coord\n          }] : [{\n            x: x + width,\n            y: coord\n          }, {\n            x: x,\n            y: coord\n          }];\n        }\n      } else if (isX) {\n        var _value = this.props.x;\n        var _scale = xAxis.scale;\n        var _offset = _scale.bandwidth ? _scale.bandwidth() / 2 : 0;\n        var _coord = _scale(_value) + _offset;\n        if (validateCoordinateInRange(_coord, _scale)) {\n          return xAxis.orientation === 'top' ? [{\n            x: _coord,\n            y: y\n          }, {\n            x: _coord,\n            y: y + height\n          }] : [{\n            x: _coord,\n            y: y + height\n          }, {\n            x: _coord,\n            y: y\n          }];\n        }\n      }\n      return null;\n    }\n  }, {\n    key: 'getLabelProps',\n    value: function getLabelProps(isX, isY) {\n      var _props2 = this.props,\n        xAxis = _props2.xAxis,\n        yAxis = _props2.yAxis,\n        labelPosition = _props2.labelPosition;\n      if (isY) {\n        var axis = yAxis;\n        if (axis.orientation === 'left' && labelPosition === 'end') {\n          return {\n            dx: 6,\n            dy: 6,\n            textAnchor: 'start'\n          };\n        }\n        if (axis.orientation === 'right' && labelPosition === 'start') {\n          return {\n            dx: 6,\n            dy: 6,\n            textAnchor: 'start'\n          };\n        }\n        return {\n          dx: -6,\n          dy: 6,\n          textAnchor: 'end'\n        };\n      } else if (isX) {\n        var _axis = xAxis;\n        if (_axis.orientation === 'top') {\n          return {\n            dy: 6,\n            textAnchor: 'middle'\n          };\n        }\n        return {\n          dy: -6,\n          textAnchor: 'middle'\n        };\n      }\n      return null;\n    }\n  }, {\n    key: 'renderLabel',\n    value: function renderLabel(isX, isY, end) {\n      var _props3 = this.props,\n        label = _props3.label,\n        stroke = _props3.stroke;\n      var props = _extends({}, getPresentationAttributes(label), {\n        stroke: 'none',\n        fill: stroke\n      }, end, this.getLabelProps(isX, isY));\n      if (React.isValidElement(label)) {\n        return React.cloneElement(label, props);\n      } else if (_isFunction(label)) {\n        return label(props);\n      } else if (isNumOrStr(label)) {\n        return React.createElement('g', {\n          className: 'recharts-reference-line-label'\n        }, React.createElement(Text, props, label));\n      }\n      return null;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props4 = this.props,\n        x = _props4.x,\n        y = _props4.y,\n        labelPosition = _props4.labelPosition,\n        shape = _props4.shape;\n      var isX = isNumOrStr(x);\n      var isY = isNumOrStr(y);\n      if (!isX && !isY) {\n        return null;\n      }\n      var endPoints = this.getEndPoints(isX, isY);\n      if (!endPoints) {\n        return null;\n      }\n      var _endPoints = _slicedToArray(endPoints, 2),\n        start = _endPoints[0],\n        end = _endPoints[1];\n      var props = _extends({}, getPresentationAttributes(this.props), filterEventAttributes(this.props), {\n        x1: start.x,\n        y1: start.y,\n        x2: end.x,\n        y2: end.y\n      });\n      return React.createElement(Layer, {\n        className: 'recharts-reference-line'\n      }, renderLine(shape, props), this.renderLabel(isX, isY, labelPosition === 'start' ? start : end));\n    }\n  }]);\n  return ReferenceLine;\n}(Component), _class2.displayName = 'ReferenceLine', _class2.propTypes = _extends({}, PRESENTATION_ATTRIBUTES, {\n  viewBox: PropTypes.shape({\n    x: PropTypes.number,\n    y: PropTypes.number,\n    width: PropTypes.number,\n    height: PropTypes.number\n  }),\n  label: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.element, PropTypes.func]),\n  xAxis: PropTypes.object,\n  yAxis: PropTypes.object,\n  isFront: PropTypes.bool,\n  alwaysShow: PropTypes.bool,\n  x: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  y: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  yAxisId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  xAxisId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  labelPosition: PropTypes.oneOf(['start', 'end']),\n  shape: PropTypes.func\n}), _class2.defaultProps = {\n  isFront: false,\n  alwaysShow: false,\n  xAxisId: 0,\n  yAxisId: 0,\n  fill: 'none',\n  stroke: '#ccc',\n  fillOpacity: 1,\n  strokeWidth: 1,\n  labelPosition: 'end'\n}, _temp)) || _class;\nexport default ReferenceLine;","map":null,"metadata":{},"sourceType":"module"}