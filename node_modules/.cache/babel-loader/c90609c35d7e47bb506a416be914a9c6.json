{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _filter2 = require('lodash/filter');\nvar _filter3 = _interopRequireDefault(_filter2);\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\nvar _raf = require('raf');\nvar _raf2 = _interopRequireDefault(_raf);\nvar _util = require('./util');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar alpha = function alpha(begin, end, k) {\n  return begin + (end - begin) * k;\n};\nvar needContinue = function needContinue(_ref) {\n  var from = _ref.from,\n    to = _ref.to;\n  return from !== to;\n};\n\n/*\n * @description: cal new from value and velocity in each stepper\n * @return: { [styleProperty]: { from, to, velocity } }\n */\nvar calStepperVals = function calStepperVals(easing, preVals, steps) {\n  var nextStepVals = (0, _util.mapObject)(function (key, val) {\n    if (needContinue(val)) {\n      var _easing = easing(val.from, val.to, val.velocity),\n        _easing2 = _slicedToArray(_easing, 2),\n        newX = _easing2[0],\n        newV = _easing2[1];\n      return _extends({}, val, {\n        from: newX,\n        velocity: newV\n      });\n    }\n    return val;\n  }, preVals);\n  if (steps < 1) {\n    return (0, _util.mapObject)(function (key, val) {\n      if (needContinue(val)) {\n        return _extends({}, val, {\n          velocity: alpha(val.velocity, nextStepVals[key].velocity, steps),\n          from: alpha(val.from, nextStepVals[key].from, steps)\n        });\n      }\n      return val;\n    }, preVals);\n  }\n  return calStepperVals(easing, nextStepVals, steps - 1);\n};\n\n// configure update function\n\nexports.default = function (from, to, easing, duration, render) {\n  var interKeys = (0, _util.getIntersectionKeys)(from, to);\n  var timingStyle = interKeys.reduce(function (res, key) {\n    return _extends({}, res, _defineProperty({}, key, [from[key], to[key]]));\n  }, {});\n  var stepperStyle = interKeys.reduce(function (res, key) {\n    return _extends({}, res, _defineProperty({}, key, {\n      from: from[key],\n      velocity: 0,\n      to: to[key]\n    }));\n  }, {});\n  var cafId = -1;\n  var preTime = void 0;\n  var beginTime = void 0;\n  var update = function update() {\n    return null;\n  };\n  var getCurrStyle = function getCurrStyle() {\n    return (0, _util.mapObject)(function (key, val) {\n      return val.from;\n    }, stepperStyle);\n  };\n  var shouldStopAnimation = function shouldStopAnimation() {\n    return !(0, _filter3.default)(stepperStyle, needContinue).length;\n  };\n\n  // stepper timing function like spring\n  var stepperUpdate = function stepperUpdate(now) {\n    if (!preTime) {\n      preTime = now;\n    }\n    var deltaTime = now - preTime;\n    var steps = deltaTime / easing.dt;\n    stepperStyle = calStepperVals(easing, stepperStyle, steps);\n    // get union set and add compatible prefix\n    render(_extends({}, from, to, getCurrStyle(stepperStyle)));\n    preTime = now;\n    if (!shouldStopAnimation()) {\n      cafId = (0, _raf2.default)(update);\n    }\n  };\n\n  // t => val timing function like cubic-bezier\n  var timingUpdate = function timingUpdate(now) {\n    if (!beginTime) {\n      beginTime = now;\n    }\n    var t = (now - beginTime) / duration;\n    var currStyle = (0, _util.mapObject)(function (key, val) {\n      return alpha.apply(undefined, _toConsumableArray(val).concat([easing(t)]));\n    }, timingStyle);\n\n    // get union set and add compatible prefix\n    render(_extends({}, from, to, currStyle));\n    if (t < 1) {\n      cafId = (0, _raf2.default)(update);\n    } else {\n      var finalStyle = (0, _util.mapObject)(function (key, val) {\n        return alpha.apply(undefined, _toConsumableArray(val).concat([easing(1)]));\n      }, timingStyle);\n      render(_extends({}, from, to, finalStyle));\n    }\n  };\n  update = easing.isStepper ? stepperUpdate : timingUpdate;\n\n  // return start animation method\n  return function () {\n    (0, _raf2.default)(update);\n\n    // return stop animation method\n    return function () {\n      (0, _raf.cancel)(cafId);\n    };\n  };\n};","map":null,"metadata":{},"sourceType":"script"}