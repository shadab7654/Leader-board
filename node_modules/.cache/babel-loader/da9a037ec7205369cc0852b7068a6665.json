{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getDisplayName } from './ReactUtils';\nexport default function (WrappedComponent) {\n  var _class, _temp2;\n  var AnimationDecorator = (_temp2 = _class = function (_Component) {\n    _inherits(AnimationDecorator, _Component);\n    function AnimationDecorator() {\n      var _ref;\n      var _temp, _this, _ret;\n      _classCallCheck(this, AnimationDecorator);\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AnimationDecorator.__proto__ || Object.getPrototypeOf(AnimationDecorator)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n        animationId: 0\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n    _createClass(AnimationDecorator, [{\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps) {\n        var animationId = this.state.animationId;\n        if (this.props.data !== nextProps.data) {\n          this.setState({\n            animationId: animationId + 1\n          });\n        }\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        return React.createElement(WrappedComponent, _extends({}, this.props, {\n          animationId: this.state.animationId\n        }));\n      }\n    }]);\n    return AnimationDecorator;\n  }(Component), _class.displayName = 'AnimationDecorator(' + getDisplayName(WrappedComponent) + ')', _class.propTypes = _extends({}, WrappedComponent.propTypes, {\n    data: PropTypes.array\n  }), _class.WrappedComponent = WrappedComponent, _class.defaultProps = WrappedComponent.defaultProps, _temp2);\n  return AnimationDecorator;\n}","map":null,"metadata":{},"sourceType":"module"}