{"ast":null,"code":"import _range from 'lodash/range';\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _class, _class2, _temp2;\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * @fileOverview Radar Chart\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { scalePoint } from 'd3-scale';\nimport { getNiceTickValues } from 'recharts-scale';\nimport Surface from '../container/Surface';\nimport Legend from '../component/Legend';\nimport Tooltip from '../component/Tooltip';\nimport Radar from '../polar/Radar';\nimport PolarGrid from '../polar/PolarGrid';\nimport PolarAngleAxis from '../polar/PolarAngleAxis';\nimport PolarRadiusAxis from '../polar/PolarRadiusAxis';\nimport { validateWidthHeight, findChildByType, findAllByType, filterSvgElements, getPresentationAttributes } from '../util/ReactUtils';\nimport { getOffset, calculateChartCoordinate } from '../util/DOMUtils';\nimport { polarToCartesian, getMaxRadius } from '../util/PolarUtils';\nimport { getPercentValue, parseSpecifiedDomain, combineEventHandlers, parseScale, getValueByDataKey } from '../util/DataUtils';\nimport pureRender from '../util/PureRender';\nimport AnimationDecorator from '../util/AnimationDecorator';\nvar RadarChart = AnimationDecorator(_class = pureRender(_class = (_temp2 = _class2 = function (_Component) {\n  _inherits(RadarChart, _Component);\n  function RadarChart() {\n    var _ref;\n    var _temp, _this, _ret;\n    _classCallCheck(this, RadarChart);\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RadarChart.__proto__ || Object.getPrototypeOf(RadarChart)).call.apply(_ref, [this].concat(args))), _this), _this.state = _this.createDefaultState(), _this.handleMouseEnter = function (itemProps, e) {\n      var children = _this.props.children;\n      var points = itemProps.points;\n      var tooltipItem = findChildByType(children, Tooltip);\n      if (tooltipItem && points.length) {\n        var container = _this.container;\n        var containerOffset = getOffset(container);\n        var ne = calculateChartCoordinate(e, containerOffset);\n        _this.setState({\n          isTooltipActive: true,\n          activeTooltipLabel: itemProps.name || itemProps.dataKey,\n          activeTooltipCoord: {\n            x: ne.chartX,\n            y: ne.chartY\n          },\n          activeTooltipPayload: _this.getTooltipContent(itemProps)\n        });\n      }\n    }, _this.handleMouseLeave = function () {\n      var children = _this.props.children;\n      var tooltipItem = findChildByType(children, Tooltip);\n      if (tooltipItem) {\n        _this.setState({\n          isTooltipActive: false\n        });\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n  _createClass(RadarChart, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.data !== this.props.data) {\n        this.setState(this.createDefaultState());\n      }\n    }\n  }, {\n    key: 'getTooltipContent',\n    value: function getTooltipContent(itemProps) {\n      var points = itemProps.points,\n        dataKey = itemProps.dataKey,\n        unit = itemProps.unit;\n      return points.map(function (entry) {\n        var name = entry.name,\n          value = entry.value,\n          payload = entry.payload;\n        return _extends({}, getPresentationAttributes(itemProps), {\n          dataKey: dataKey,\n          unit: unit,\n          name: name,\n          value: value,\n          payload: payload\n        });\n      });\n    }\n  }, {\n    key: 'getRadiusAxisCfg',\n    value: function getRadiusAxisCfg(radiusAxis, innerRadius, outerRadius) {\n      var props = radiusAxis ? radiusAxis.props : PolarRadiusAxis.defaultProps;\n      var domain = void 0,\n        tickCount = void 0,\n        ticks = void 0;\n      if (radiusAxis && radiusAxis.props.ticks) {\n        ticks = radiusAxis.props.ticks;\n        tickCount = ticks.length;\n        domain = [Math.min.apply(null, ticks), Math.max.apply(null, ticks)];\n      } else {\n        tickCount = Math.max(radiusAxis && radiusAxis.props.tickCount || PolarRadiusAxis.defaultProps.tickCount, 2);\n        ticks = this.getTicksByItems(radiusAxis, tickCount);\n        domain = [Math.min.apply(null, ticks), Math.max.apply(null, ticks)];\n      }\n      return {\n        tickCount: tickCount,\n        ticks: ticks,\n        scale: parseScale(props).domain(domain).range([innerRadius, outerRadius])\n      };\n    }\n  }, {\n    key: 'getTicksByItems',\n    value: function getTicksByItems(axisItem, tickCount) {\n      var _props = this.props,\n        data = _props.data,\n        children = _props.children;\n      var _ref2 = axisItem ? axisItem.props : PolarRadiusAxis.defaultProps,\n        domain = _ref2.domain,\n        allowDataOverflow = _ref2.allowDataOverflow;\n      var radarItems = findAllByType(children, Radar);\n      var dataKeys = radarItems.map(function (item) {\n        return item.props.dataKey;\n      });\n      var extent = data.reduce(function (prev, current) {\n        var values = dataKeys.map(function (v) {\n          return getValueByDataKey(current, v, 0);\n        });\n        var currentMax = Math.max.apply(null, values);\n        var currentMin = Math.min.apply(null, values);\n        return [Math.min(prev[0], currentMin), Math.max(prev[1], currentMax)];\n      }, [Infinity, -Infinity]);\n      var finalDomain = parseSpecifiedDomain(domain, extent, allowDataOverflow);\n      if (domain && (domain[0] === 'auto' || domain[1] === 'auto')) {\n        return getNiceTickValues(finalDomain, tickCount);\n      }\n      return finalDomain;\n    }\n  }, {\n    key: 'getGridRadius',\n    value: function getGridRadius(gridCount, innerRadius, outerRadius) {\n      var domain = _range(0, gridCount);\n      var scale = scalePoint().domain(domain).range([innerRadius, outerRadius]);\n      return domain.map(function (v) {\n        return scale(v);\n      });\n    }\n  }, {\n    key: 'getAngle',\n    value: function getAngle(index, dataLength, startAngle, clockWise) {\n      var sign = clockWise ? -1 : 1;\n      var angleInterval = 360 / dataLength;\n      return startAngle + index * sign * angleInterval;\n    }\n  }, {\n    key: 'getAngleTicks',\n    value: function getAngleTicks(dataLength, startAngle, clockWise) {\n      var angles = [];\n      for (var i = 0; i < dataLength; i++) {\n        angles.push(this.getAngle(i, dataLength, startAngle, clockWise));\n      }\n      return angles;\n    }\n  }, {\n    key: 'getRadiusTicks',\n    value: function getRadiusTicks(axisCfg) {\n      var ticks = axisCfg.ticks,\n        scale = axisCfg.scale;\n      if (ticks && ticks.length) {\n        return ticks.map(function (entry) {\n          return {\n            radius: scale(entry),\n            value: entry\n          };\n        });\n      }\n      var tickCount = axisCfg.tickCount;\n      var domain = scale.domain();\n      return _range(0, tickCount).map(function (v, i) {\n        var value = domain[0] + i * (domain[1] - domain[0]) / (tickCount - 1);\n        return {\n          value: value,\n          radius: scale(value)\n        };\n      });\n    }\n  }, {\n    key: 'getComposedData',\n    value: function getComposedData(item, scale, cx, cy) {\n      var _this2 = this;\n      var dataKey = item.props.dataKey;\n      var _props2 = this.props,\n        data = _props2.data,\n        startAngle = _props2.startAngle,\n        clockWise = _props2.clockWise,\n        children = _props2.children;\n      var angleAxis = findChildByType(children, PolarAngleAxis);\n      var nameKey = angleAxis && angleAxis.props.dataKey;\n      var len = data.length;\n      return data.map(function (entry, i) {\n        var value = getValueByDataKey(entry, dataKey, 0);\n        var angle = _this2.getAngle(i, len, startAngle, clockWise);\n        var radius = scale(value);\n        return _extends({}, polarToCartesian(cx, cy, radius, angle), {\n          value: value,\n          name: nameKey ? entry[nameKey] || i : i,\n          cx: cx,\n          cy: cy,\n          radius: radius,\n          angle: angle,\n          payload: entry\n        });\n      });\n    }\n    /**\n     * Returns default, reset state for the radar chart.\n     * @return {Object} Whole new state\n     */\n  }, {\n    key: 'createDefaultState',\n    value: function createDefaultState() {\n      return {\n        activeTooltipLabel: '',\n        activeTooltipCoord: {\n          x: 0,\n          y: 0\n        },\n        isTooltipActive: false\n      };\n    }\n  }, {\n    key: 'renderRadars',\n    value: function renderRadars(items, scale, cx, cy) {\n      var _this3 = this;\n      if (!items || !items.length) {\n        return null;\n      }\n      var _props3 = this.props,\n        onMouseEnter = _props3.onMouseEnter,\n        onMouseLeave = _props3.onMouseLeave,\n        onClick = _props3.onClick;\n      var baseProps = getPresentationAttributes(this.props);\n      return items.map(function (el, index) {\n        return React.cloneElement(el, _extends({}, baseProps, getPresentationAttributes(el), {\n          animationId: _this3.props.animationId,\n          points: _this3.getComposedData(el, scale, cx, cy),\n          key: el.key || 'radar-' + index,\n          onMouseEnter: combineEventHandlers(_this3.handleMouseEnter, onMouseEnter, el.props.onMouseEnter),\n          onMouseLeave: combineEventHandlers(_this3.handleMouseLeave, onMouseLeave, el.props.onMouseLeave),\n          onClick: combineEventHandlers(null, onClick, el.props.onClick)\n        }));\n      });\n    }\n  }, {\n    key: 'renderGrid',\n    value: function renderGrid(radiusAxisCfg, cx, cy, innerRadius, outerRadius) {\n      var children = this.props.children;\n      var grid = findChildByType(children, PolarGrid);\n      if (!grid) {\n        return null;\n      }\n      var _props4 = this.props,\n        startAngle = _props4.startAngle,\n        clockWise = _props4.clockWise,\n        data = _props4.data;\n      var len = data.length;\n      var gridCount = radiusAxisCfg.tickCount;\n      return React.cloneElement(grid, {\n        polarAngles: this.getAngleTicks(len, startAngle, clockWise),\n        polarRadius: this.getGridRadius(gridCount, innerRadius, outerRadius),\n        cx: cx,\n        cy: cy,\n        innerRadius: innerRadius,\n        outerRadius: outerRadius,\n        key: 'layer-grid'\n      });\n    }\n  }, {\n    key: 'renderAngleAxis',\n    value: function renderAngleAxis(cx, cy, outerRadius, maxRadius) {\n      var _this4 = this;\n      var children = this.props.children;\n      var angleAxis = findChildByType(children, PolarAngleAxis);\n      if (!angleAxis || angleAxis.props.hide) {\n        return null;\n      }\n      var _props5 = this.props,\n        data = _props5.data,\n        startAngle = _props5.startAngle,\n        clockWise = _props5.clockWise;\n      var len = data.length;\n      var grid = findChildByType(children, PolarGrid);\n      var radius = getPercentValue(angleAxis.props.radius, maxRadius, outerRadius);\n      var dataKey = angleAxis.props.dataKey;\n      return React.cloneElement(angleAxis, {\n        ticks: data.map(function (v, i) {\n          return {\n            value: getValueByDataKey(v, dataKey, i),\n            angle: _this4.getAngle(i, len, startAngle, clockWise)\n          };\n        }),\n        cx: cx,\n        cy: cy,\n        radius: radius,\n        axisLineType: grid && grid.props && grid.props.gridType || PolarGrid.defaultProps.gridType,\n        key: 'layer-angle-axis'\n      });\n    }\n  }, {\n    key: 'renderRadiusAxis',\n    value: function renderRadiusAxis(radiusAxis, radiusAxisCfg, cx, cy) {\n      if (!radiusAxis || radiusAxis.props.hide) {\n        return null;\n      }\n      var startAngle = this.props.startAngle;\n      return React.cloneElement(radiusAxis, {\n        angle: radiusAxis.props.angle || startAngle,\n        ticks: this.getRadiusTicks(radiusAxisCfg),\n        cx: cx,\n        cy: cy\n      });\n    }\n  }, {\n    key: 'renderTooltip',\n    value: function renderTooltip() {\n      var children = this.props.children;\n      var tooltipItem = findChildByType(children, Tooltip);\n      if (!tooltipItem) {\n        return null;\n      }\n      var _props6 = this.props,\n        width = _props6.width,\n        height = _props6.height;\n      var _state = this.state,\n        isTooltipActive = _state.isTooltipActive,\n        activeTooltipLabel = _state.activeTooltipLabel,\n        activeTooltipCoord = _state.activeTooltipCoord,\n        activeTooltipPayload = _state.activeTooltipPayload;\n      var viewBox = {\n        x: 0,\n        y: 0,\n        width: width,\n        height: height\n      };\n      return React.cloneElement(tooltipItem, {\n        viewBox: viewBox,\n        active: isTooltipActive,\n        label: activeTooltipLabel,\n        payload: activeTooltipPayload,\n        coordinate: activeTooltipCoord\n      });\n    }\n\n    /**\n     * Draw legend\n     * @param  {Array} items             The instances of item\n     * @return {ReactElement}            The instance of Legend\n     */\n  }, {\n    key: 'renderLegend',\n    value: function renderLegend(items) {\n      var children = this.props.children;\n      var legendItem = findChildByType(children, Legend);\n      if (!legendItem) {\n        return null;\n      }\n      var _props7 = this.props,\n        width = _props7.width,\n        height = _props7.height,\n        margin = _props7.margin;\n      var legendData = legendItem.props && legendItem.props.payload || items.map(function (child) {\n        var _child$props = child.props,\n          dataKey = _child$props.dataKey,\n          name = _child$props.name,\n          legendType = _child$props.legendType;\n        return {\n          dataKey: dataKey,\n          type: legendItem.props.iconType || legendType || 'square',\n          color: child.props.stroke || child.props.fill,\n          value: name || dataKey,\n          payload: child.props\n        };\n      }, this);\n      return React.cloneElement(legendItem, _extends({}, Legend.getWithHeight(legendItem, width), {\n        payload: legendData,\n        chartWidth: width,\n        chartHeight: height,\n        margin: margin\n      }));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this5 = this;\n      if (!validateWidthHeight(this)) {\n        return null;\n      }\n      var _props8 = this.props,\n        className = _props8.className,\n        data = _props8.data,\n        width = _props8.width,\n        height = _props8.height,\n        margin = _props8.margin,\n        children = _props8.children,\n        style = _props8.style,\n        others = _objectWithoutProperties(_props8, ['className', 'data', 'width', 'height', 'margin', 'children', 'style']);\n      var cx = getPercentValue(this.props.cx, width, width / 2);\n      var cy = getPercentValue(this.props.cy, height, height / 2);\n      var maxRadius = getMaxRadius(width, height, margin);\n      var innerRadius = getPercentValue(this.props.innerRadius, maxRadius, 0);\n      var outerRadius = getPercentValue(this.props.outerRadius, maxRadius, maxRadius * 0.8);\n      if (outerRadius <= 0 || !data || !data.length) {\n        return null;\n      }\n      var items = findAllByType(children, Radar);\n      var radiusAxis = findChildByType(children, PolarRadiusAxis);\n      var radiusAxisCfg = this.getRadiusAxisCfg(radiusAxis, innerRadius, outerRadius);\n      var attrs = getPresentationAttributes(others);\n      return React.createElement('div', {\n        className: classNames('recharts-wrapper', className),\n        style: _extends({}, style, {\n          position: 'relative',\n          cursor: 'default',\n          width: width,\n          height: height\n        }),\n        ref: function ref(node) {\n          _this5.container = node;\n        }\n      }, React.createElement(Surface, _extends({}, attrs, {\n        width: width,\n        height: height\n      }), this.renderGrid(radiusAxisCfg, cx, cy, innerRadius, outerRadius), this.renderRadiusAxis(radiusAxis, radiusAxisCfg, cx, cy), this.renderAngleAxis(cx, cy, outerRadius, maxRadius), this.renderRadars(items, radiusAxisCfg.scale, cx, cy), filterSvgElements(children)), this.renderLegend(items), this.renderTooltip());\n    }\n  }]);\n  return RadarChart;\n}(Component), _class2.displayName = 'RadarChart', _class2.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  margin: PropTypes.shape({\n    top: PropTypes.number,\n    right: PropTypes.number,\n    bottom: PropTypes.number,\n    left: PropTypes.number\n  }),\n  cx: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  cy: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  startAngle: PropTypes.number,\n  innerRadius: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  outerRadius: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  clockWise: PropTypes.bool,\n  data: PropTypes.array,\n  style: PropTypes.object,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  className: PropTypes.string,\n  animationId: PropTypes.number,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onClick: PropTypes.func\n}, _class2.defaultProps = {\n  width: 0,\n  height: 0,\n  cx: '50%',\n  cy: '50%',\n  innerRadius: 0,\n  outerRadius: '80%',\n  startAngle: 90,\n  clockWise: true,\n  data: [],\n  margin: {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  }\n}, _temp2)) || _class) || _class;\nexport default RadarChart;","map":null,"metadata":{},"sourceType":"module"}