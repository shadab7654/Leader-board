{"ast":null,"code":"import _isArray from 'lodash/isArray';\nimport _isFunction from 'lodash/isFunction';\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _class, _class2, _temp2;\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * @fileOverview Area\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Animate from 'react-smooth';\nimport Curve from '../shape/Curve';\nimport Dot from '../shape/Dot';\nimport Layer from '../container/Layer';\nimport Text from '../component/Text';\nimport pureRender from '../util/PureRender';\nimport { PRESENTATION_ATTRIBUTES, EVENT_ATTRIBUTES, LEGEND_TYPES, getPresentationAttributes, isSsr } from '../util/ReactUtils';\nimport { isNumber, uniqueId } from '../util/DataUtils';\nvar Area = pureRender(_class = (_temp2 = _class2 = function (_Component) {\n  _inherits(Area, _Component);\n  function Area() {\n    var _ref;\n    var _temp, _this, _ret;\n    _classCallCheck(this, Area);\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Area.__proto__ || Object.getPrototypeOf(Area)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      isAnimationFinished: true\n    }, _this.id = uniqueId('recharts-area-'), _this.handleAnimationEnd = function () {\n      _this.setState({\n        isAnimationFinished: true\n      });\n      _this.props.onAnimationEnd();\n    }, _this.handleAnimationStart = function () {\n      _this.setState({\n        isAnimationFinished: false\n      });\n      _this.props.onAnimationStart();\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n  _createClass(Area, [{\n    key: 'renderCurve',\n    value: function renderCurve() {\n      var _props = this.props,\n        layout = _props.layout,\n        type = _props.type,\n        stroke = _props.stroke,\n        points = _props.points,\n        baseLine = _props.baseLine,\n        connectNulls = _props.connectNulls,\n        isRange = _props.isRange;\n      return React.createElement('g', null, stroke !== 'none' && React.createElement(Curve, _extends({}, getPresentationAttributes(this.props), {\n        className: 'recharts-area-curve',\n        layout: layout,\n        type: type,\n        connectNulls: connectNulls,\n        fill: 'none',\n        points: points\n      })), stroke !== 'none' && isRange && React.createElement(Curve, _extends({}, getPresentationAttributes(this.props), {\n        className: 'recharts-area-curve',\n        layout: layout,\n        type: type,\n        connectNulls: connectNulls,\n        fill: 'none',\n        points: baseLine\n      })), React.createElement(Curve, _extends({}, this.props, {\n        stroke: 'none',\n        className: 'recharts-area-area'\n      })));\n    }\n  }, {\n    key: 'renderHorizontalRect',\n    value: function renderHorizontalRect(alpha) {\n      var _props2 = this.props,\n        baseLine = _props2.baseLine,\n        points = _props2.points,\n        strokeWidth = _props2.strokeWidth;\n      var startX = points[0].x;\n      var endX = points[points.length - 1].x;\n      var width = alpha * Math.abs(startX - endX);\n      var maxY = Math.max.apply(null, points.map(function (entry) {\n        return entry.y || 0;\n      }));\n      if (isNumber(baseLine)) {\n        maxY = Math.max(baseLine, maxY);\n      } else {\n        maxY = Math.max(Math.max.apply(null, baseLine.map(function (entry) {\n          return entry.y || 0;\n        })), maxY);\n      }\n      return React.createElement('rect', {\n        x: startX < endX ? startX : startX - width,\n        y: 0,\n        width: width,\n        height: maxY + (strokeWidth || 1)\n      });\n    }\n  }, {\n    key: 'renderVerticalRect',\n    value: function renderVerticalRect(alpha) {\n      var _props3 = this.props,\n        baseLine = _props3.baseLine,\n        points = _props3.points,\n        strokeWidth = _props3.strokeWidth;\n      var startY = points[0].y;\n      var endY = points[points.length - 1].y;\n      var height = alpha * Math.abs(startY - endY);\n      var maxX = Math.max.apply(null, points.map(function (entry) {\n        return entry.x || 0;\n      }));\n      if (isNumber(baseLine)) {\n        maxX = Math.max(baseLine, maxX);\n      } else {\n        maxX = Math.max(Math.max.apply(null, baseLine.map(function (entry) {\n          return entry.x || 0;\n        })), maxX);\n      }\n      return React.createElement('rect', {\n        x: 0,\n        y: startY < endY ? startY : startY - height,\n        width: maxX + (strokeWidth || 1),\n        height: height\n      });\n    }\n  }, {\n    key: 'renderClipRect',\n    value: function renderClipRect(alpha) {\n      var layout = this.props.layout;\n      if (layout === 'vertical') {\n        return this.renderVerticalRect(alpha);\n      }\n      return this.renderHorizontalRect(alpha);\n    }\n  }, {\n    key: 'renderClipPath',\n    value: function renderClipPath() {\n      var _this2 = this;\n      var _props4 = this.props,\n        isAnimationActive = _props4.isAnimationActive,\n        animationDuration = _props4.animationDuration,\n        animationEasing = _props4.animationEasing,\n        animationBegin = _props4.animationBegin,\n        animationId = _props4.animationId;\n      return React.createElement('defs', null, React.createElement('clipPath', {\n        id: 'animationClipPath-' + this.id\n      }, React.createElement(Animate, {\n        easing: animationEasing,\n        isActive: isAnimationActive,\n        duration: animationDuration,\n        key: animationId,\n        animationBegin: animationBegin,\n        onAnimationStart: this.handleAnimationStart,\n        onAnimationEnd: this.handleAnimationEnd,\n        from: {\n          alpha: 0\n        },\n        to: {\n          alpha: 1\n        }\n      }, function (_ref2) {\n        var alpha = _ref2.alpha;\n        return _this2.renderClipRect(alpha);\n      })));\n    }\n  }, {\n    key: 'renderDotItem',\n    value: function renderDotItem(option, props) {\n      var dotItem = void 0;\n      if (React.isValidElement(option)) {\n        dotItem = React.cloneElement(option, props);\n      } else if (_isFunction(option)) {\n        dotItem = option(props);\n      } else {\n        dotItem = React.createElement(Dot, _extends({}, props, {\n          className: 'recharts-area-dot'\n        }));\n      }\n      return dotItem;\n    }\n  }, {\n    key: 'renderDots',\n    value: function renderDots() {\n      var _this3 = this;\n      var isAnimationActive = this.props.isAnimationActive;\n      if (isAnimationActive && !this.state.isAnimationFinished) {\n        return null;\n      }\n      var _props5 = this.props,\n        dot = _props5.dot,\n        points = _props5.points;\n      var areaProps = getPresentationAttributes(this.props);\n      var customDotProps = getPresentationAttributes(dot);\n      var dots = points.map(function (entry, i) {\n        var dotProps = _extends({\n          key: 'dot-' + i,\n          r: 3\n        }, areaProps, customDotProps, {\n          cx: entry.x,\n          cy: entry.y,\n          index: i,\n          value: entry.value,\n          payload: entry.payload\n        });\n        return _this3.renderDotItem(dot, dotProps);\n      });\n      return React.createElement(Layer, {\n        className: 'recharts-area-dots'\n      }, dots);\n    }\n  }, {\n    key: 'renderLabelItem',\n    value: function renderLabelItem(option, props, value) {\n      var labelItem = void 0;\n      if (React.isValidElement(option)) {\n        labelItem = React.cloneElement(option, props);\n      } else if (_isFunction(option)) {\n        labelItem = option(props);\n      } else {\n        labelItem = React.createElement(Text, _extends({\n          key: props.key\n        }, props, {\n          className: 'recharts-area-label'\n        }), _isArray(value) ? value[1] : value);\n      }\n      return labelItem;\n    }\n  }, {\n    key: 'renderLabels',\n    value: function renderLabels() {\n      var _this4 = this;\n      var isAnimationActive = this.props.isAnimationActive;\n      if (isAnimationActive && !this.state.isAnimationFinished) {\n        return null;\n      }\n      var _props6 = this.props,\n        points = _props6.points,\n        label = _props6.label;\n      var areaProps = getPresentationAttributes(this.props);\n      var customLabelProps = getPresentationAttributes(label);\n      var labels = points.map(function (entry, i) {\n        var labelProps = _extends({\n          textAnchor: 'middle'\n        }, entry, areaProps, customLabelProps, {\n          index: i,\n          key: 'label-' + i,\n          value: entry.value,\n          payload: entry.payload\n        });\n        return _this4.renderLabelItem(label, labelProps, entry.value);\n      });\n      return React.createElement(Layer, {\n        className: 'recharts-area-labels'\n      }, labels);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props7 = this.props,\n        dot = _props7.dot,\n        label = _props7.label,\n        points = _props7.points,\n        className = _props7.className,\n        top = _props7.top,\n        left = _props7.left,\n        xAxis = _props7.xAxis,\n        yAxis = _props7.yAxis,\n        width = _props7.width,\n        height = _props7.height;\n      if (!points || !points.length) {\n        return null;\n      }\n      var hasSinglePoint = points.length === 1;\n      var layerClass = classNames('recharts-area', className);\n      var needClip = xAxis && xAxis.allowDataOverflow || yAxis && yAxis.allowDataOverflow;\n      return React.createElement(Layer, {\n        className: layerClass\n      }, needClip ? React.createElement('defs', null, React.createElement('clipPath', {\n        id: 'clipPath-' + this.id\n      }, React.createElement('rect', {\n        x: left,\n        y: top,\n        width: width,\n        height: height\n      }))) : null, !hasSinglePoint ? this.renderClipPath() : null, !hasSinglePoint ? React.createElement(Layer, {\n        clipPath: needClip ? 'url(#clipPath-' + this.id + ')' : null\n      }, React.createElement(Layer, {\n        clipPath: 'url(#animationClipPath-' + this.id + ')'\n      }, this.renderCurve())) : null, (dot || hasSinglePoint) && this.renderDots(), label && this.renderLabels());\n    }\n  }]);\n  return Area;\n}(Component), _class2.displayName = 'Area', _class2.propTypes = _extends({}, PRESENTATION_ATTRIBUTES, EVENT_ATTRIBUTES, {\n  className: PropTypes.string,\n  dataKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.func]).isRequired,\n  type: PropTypes.oneOfType([PropTypes.oneOf(['basis', 'basisClosed', 'basisOpen', 'linear', 'linearClosed', 'natural', 'monotoneX', 'monotoneY', 'monotone', 'step', 'stepBefore', 'stepAfter']), PropTypes.func]),\n  unit: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  name: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  yAxisId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  xAxisId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  yAxis: PropTypes.object,\n  xAxis: PropTypes.object,\n  stackId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  legendType: PropTypes.oneOf(LEGEND_TYPES),\n  connectNulls: PropTypes.bool,\n  activeDot: PropTypes.oneOfType([PropTypes.object, PropTypes.element, PropTypes.func, PropTypes.bool]),\n  // dot configuration\n  dot: PropTypes.oneOfType([PropTypes.func, PropTypes.element, PropTypes.object, PropTypes.bool]),\n  label: PropTypes.oneOfType([PropTypes.func, PropTypes.element, PropTypes.object, PropTypes.bool]),\n  // have curve configuration\n  layout: PropTypes.oneOf(['horizontal', 'vertical']),\n  baseLine: PropTypes.oneOfType([PropTypes.number, PropTypes.array]),\n  isRange: PropTypes.bool,\n  points: PropTypes.arrayOf(PropTypes.shape({\n    x: PropTypes.number,\n    y: PropTypes.number,\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.array])\n  })),\n  onAnimationStart: PropTypes.func,\n  onAnimationEnd: PropTypes.func,\n  animationId: PropTypes.number,\n  isAnimationActive: PropTypes.bool,\n  animationBegin: PropTypes.number,\n  animationDuration: PropTypes.number,\n  animationEasing: PropTypes.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear'])\n}), _class2.defaultProps = {\n  stroke: '#3182bd',\n  fill: '#3182bd',\n  fillOpacity: 0.6,\n  xAxisId: 0,\n  yAxisId: 0,\n  legendType: 'line',\n  connectNulls: false,\n  // points of area\n  points: [],\n  dot: false,\n  label: false,\n  activeDot: true,\n  isAnimationActive: !isSsr(),\n  animationBegin: 0,\n  animationDuration: 1500,\n  animationEasing: 'ease',\n  onAnimationStart: function onAnimationStart() {},\n  onAnimationEnd: function onAnimationEnd() {}\n}, _temp2)) || _class;\nexport default Area;","map":null,"metadata":{},"sourceType":"module"}