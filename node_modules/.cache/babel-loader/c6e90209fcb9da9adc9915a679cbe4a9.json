{"ast":null,"code":"import _range from 'lodash/range';\nimport _isFunction from 'lodash/isFunction';\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _class, _class2, _temp;\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * @fileOverview Brush\n */\nimport React, { Component, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { scalePoint } from 'd3-scale';\nimport { getValueByDataKey } from '../util/DataUtils';\nimport pureRender from '../util/PureRender';\nimport Layer from '../container/Layer';\nimport Text from '../component/Text';\nvar Brush = pureRender(_class = (_temp = _class2 = function (_Component) {\n  _inherits(Brush, _Component);\n  function Brush(props) {\n    _classCallCheck(this, Brush);\n    var _this = _possibleConstructorReturn(this, (Brush.__proto__ || Object.getPrototypeOf(Brush)).call(this, props));\n    _this.handleDrag = function (e) {\n      if (_this.leaveTimer) {\n        clearTimeout(_this.leaveTimer);\n        _this.leaveTimer = null;\n      }\n      if (_this.state.isTravellerMoving) {\n        _this.handleTravellerMove(e);\n      } else if (_this.state.isSlideMoving) {\n        _this.handleSlideDrag(e);\n      }\n    };\n    _this.handleTouchMove = function (e) {\n      if (e.changedTouches != null && e.changedTouches.length > 0) {\n        _this.handleDrag(e.changedTouches[0]);\n      }\n    };\n    _this.handleDragEnd = function () {\n      _this.setState({\n        isTravellerMoving: false,\n        isSlideMoving: false\n      });\n    };\n    _this.handleLeaveWrapper = function () {\n      if (_this.state.isTravellerMoving || _this.state.isSlideMoving) {\n        _this.leaveTimer = setTimeout(_this.handleDragEnd, 1000);\n      }\n    };\n    _this.handleEnterSlideOrTraveller = function () {\n      _this.setState({\n        isTextActive: true\n      });\n    };\n    _this.handleLeaveSlideOrTraveller = function () {\n      _this.setState({\n        isTextActive: false\n      });\n    };\n    _this.handleSlideDragStart = function (e) {\n      var event = e.changedTouches && e.changedTouches.length ? e.changedTouches[0] : e;\n      _this.setState({\n        isTravellerMoving: false,\n        isSlideMoving: true,\n        slideMoveStartX: event.pageX\n      });\n    };\n    _this.travellerDragStartHandlers = {\n      startX: _this.handleTravellerDragStart.bind(_this, 'startX'),\n      endX: _this.handleTravellerDragStart.bind(_this, 'endX')\n    };\n    if (props.data && props.data.length) {\n      _this.updateScale(props);\n    } else {\n      _this.state = {};\n    }\n    return _this;\n  }\n  _createClass(Brush, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n      var _props = this.props,\n        data = _props.data,\n        width = _props.width,\n        x = _props.x,\n        travellerWidth = _props.travellerWidth,\n        updateId = _props.updateId;\n      if (nextProps.data !== data || nextProps.updateId !== updateId) {\n        this.updateScale(nextProps);\n      } else if (nextProps.width !== width || nextProps.x !== x || nextProps.travellerWidth !== travellerWidth) {\n        this.scale.range([nextProps.x, nextProps.x + nextProps.width - nextProps.travellerWidth]);\n        this.scaleValues = this.scale.domain().map(function (entry) {\n          return _this2.scale(entry);\n        });\n        this.setState({\n          startX: this.scale(nextProps.startIndex),\n          endX: this.scale(nextProps.endIndex)\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.scale = null;\n      this.scaleValues = null;\n      if (this.leaveTimer) {\n        clearTimeout(this.leaveTimer);\n        this.leaveTimer = null;\n      }\n    }\n  }, {\n    key: 'getIndexInRange',\n    value: function getIndexInRange(range, x) {\n      var len = range.length;\n      var start = 0;\n      var end = len - 1;\n      while (end - start > 1) {\n        var middle = Math.floor((start + end) / 2);\n        if (range[middle] > x) {\n          end = middle;\n        } else {\n          start = middle;\n        }\n      }\n      return x >= range[end] ? end : start;\n    }\n  }, {\n    key: 'getIndex',\n    value: function getIndex(_ref) {\n      var startX = _ref.startX,\n        endX = _ref.endX;\n      var min = Math.min(startX, endX);\n      var max = Math.max(startX, endX);\n      var minIndex = this.getIndexInRange(this.scaleValues, min);\n      var maxIndex = this.getIndexInRange(this.scaleValues, max);\n      return {\n        startIndex: minIndex,\n        endIndex: maxIndex\n      };\n    }\n  }, {\n    key: 'getTextOfTick',\n    value: function getTextOfTick(index) {\n      var _props2 = this.props,\n        data = _props2.data,\n        tickFormatter = _props2.tickFormatter,\n        dataKey = _props2.dataKey;\n      var text = getValueByDataKey(data[index], dataKey, index);\n      return _isFunction(tickFormatter) ? tickFormatter(text) : text;\n    }\n  }, {\n    key: 'handleSlideDrag',\n    value: function handleSlideDrag(e) {\n      var _state = this.state,\n        slideMoveStartX = _state.slideMoveStartX,\n        startX = _state.startX,\n        endX = _state.endX;\n      var _props3 = this.props,\n        x = _props3.x,\n        width = _props3.width,\n        travellerWidth = _props3.travellerWidth,\n        startIndex = _props3.startIndex,\n        endIndex = _props3.endIndex,\n        onChange = _props3.onChange;\n      var delta = e.pageX - slideMoveStartX;\n      if (delta > 0) {\n        delta = Math.min(delta, x + width - travellerWidth - endX, x + width - travellerWidth - startX);\n      } else if (delta < 0) {\n        delta = Math.max(delta, x - startX, x - endX);\n      }\n      var newIndex = this.getIndex({\n        startX: startX + delta,\n        endX: endX + delta\n      });\n      if ((newIndex.startIndex !== startIndex || newIndex.endIndex !== endIndex) && onChange) {\n        onChange(newIndex);\n      }\n      this.setState({\n        startX: startX + delta,\n        endX: endX + delta,\n        slideMoveStartX: e.pageX\n      });\n    }\n  }, {\n    key: 'handleTravellerDragStart',\n    value: function handleTravellerDragStart(id, e) {\n      var event = e.changedTouches && e.changedTouches.length ? e.changedTouches[0] : e;\n      this.setState({\n        isSlideMoving: false,\n        isTravellerMoving: true,\n        movingTravellerId: id,\n        brushMoveStartX: event.pageX\n      });\n    }\n  }, {\n    key: 'handleTravellerMove',\n    value: function handleTravellerMove(e) {\n      var _setState;\n      var _state2 = this.state,\n        brushMoveStartX = _state2.brushMoveStartX,\n        movingTravellerId = _state2.movingTravellerId;\n      var prevValue = this.state[movingTravellerId];\n      var _props4 = this.props,\n        x = _props4.x,\n        width = _props4.width,\n        travellerWidth = _props4.travellerWidth,\n        onChange = _props4.onChange;\n      var params = {\n        startX: this.state.startX,\n        endX: this.state.endX\n      };\n      var delta = e.pageX - brushMoveStartX;\n      if (delta > 0) {\n        delta = Math.min(delta, x + width - travellerWidth - prevValue);\n      } else if (delta < 0) {\n        delta = Math.max(delta, x - prevValue);\n      }\n      params[movingTravellerId] = prevValue + delta;\n      var newIndex = this.getIndex(params);\n      this.setState((_setState = {}, _defineProperty(_setState, movingTravellerId, prevValue + delta), _defineProperty(_setState, 'brushMoveStartX', e.pageX), _setState), function () {\n        if (onChange) {\n          onChange(newIndex);\n        }\n      });\n    }\n  }, {\n    key: 'updateScale',\n    value: function updateScale(props) {\n      var _this3 = this;\n      var data = props.data,\n        startIndex = props.startIndex,\n        endIndex = props.endIndex,\n        x = props.x,\n        width = props.width,\n        travellerWidth = props.travellerWidth;\n      if (data && data.length) {\n        var len = data.length;\n        this.scale = scalePoint().domain(_range(0, len)).range([x, x + width - travellerWidth]);\n        this.scaleValues = this.scale.domain().map(function (entry) {\n          return _this3.scale(entry);\n        });\n        this.state = {\n          isTextActive: false,\n          isSlideMoving: false,\n          isTravellerMoving: false,\n          startX: this.scale(startIndex),\n          endX: this.scale(endIndex)\n        };\n      }\n    }\n  }, {\n    key: 'renderBackground',\n    value: function renderBackground() {\n      var _props5 = this.props,\n        x = _props5.x,\n        y = _props5.y,\n        width = _props5.width,\n        height = _props5.height,\n        fill = _props5.fill,\n        stroke = _props5.stroke;\n      return React.createElement('rect', {\n        stroke: stroke,\n        fill: fill,\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      });\n    }\n  }, {\n    key: 'renderPanorama',\n    value: function renderPanorama() {\n      var _props6 = this.props,\n        x = _props6.x,\n        y = _props6.y,\n        width = _props6.width,\n        height = _props6.height,\n        data = _props6.data,\n        children = _props6.children,\n        padding = _props6.padding;\n      var chartElement = Children.only(children);\n      if (!chartElement) {\n        return null;\n      }\n      return React.cloneElement(chartElement, {\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        margin: padding,\n        compact: true,\n        data: data\n      });\n    }\n  }, {\n    key: 'renderTraveller',\n    value: function renderTraveller(startX, id) {\n      var _props7 = this.props,\n        y = _props7.y,\n        travellerWidth = _props7.travellerWidth,\n        height = _props7.height,\n        stroke = _props7.stroke;\n      var lineY = Math.floor(y + height / 2) - 1;\n      var x = Math.max(startX, this.props.x);\n      return React.createElement(Layer, {\n        className: 'recharts-brush-traveller',\n        onMouseEnter: this.handleEnterSlideOrTraveller,\n        onMouseLeave: this.handleLeaveSlideOrTraveller,\n        onMouseDown: this.travellerDragStartHandlers[id],\n        onTouchStart: this.travellerDragStartHandlers[id],\n        style: {\n          cursor: 'col-resize'\n        }\n      }, React.createElement('rect', {\n        x: x,\n        y: y,\n        width: travellerWidth,\n        height: height,\n        fill: stroke,\n        stroke: 'none'\n      }), React.createElement('line', {\n        x1: x + 1,\n        y1: lineY,\n        x2: x + travellerWidth - 1,\n        y2: lineY,\n        fill: 'none',\n        stroke: '#fff'\n      }), React.createElement('line', {\n        x1: x + 1,\n        y1: lineY + 2,\n        x2: x + travellerWidth - 1,\n        y2: lineY + 2,\n        fill: 'none',\n        stroke: '#fff'\n      }));\n    }\n  }, {\n    key: 'renderSlide',\n    value: function renderSlide(startX, endX) {\n      var _props8 = this.props,\n        y = _props8.y,\n        height = _props8.height,\n        stroke = _props8.stroke;\n      return React.createElement('rect', {\n        className: 'recharts-brush-slide',\n        onMouseEnter: this.handleEnterSlideOrTraveller,\n        onMouseLeave: this.handleLeaveSlideOrTraveller,\n        onMouseDown: this.handleSlideDragStart,\n        onTouchStart: this.handleSlideDragStart,\n        style: {\n          cursor: 'move'\n        },\n        stroke: 'none',\n        fill: stroke,\n        fillOpacity: 0.2,\n        x: Math.min(startX, endX),\n        y: y,\n        width: Math.abs(endX - startX),\n        height: height\n      });\n    }\n  }, {\n    key: 'renderText',\n    value: function renderText() {\n      var _props9 = this.props,\n        startIndex = _props9.startIndex,\n        endIndex = _props9.endIndex,\n        y = _props9.y,\n        height = _props9.height,\n        travellerWidth = _props9.travellerWidth,\n        stroke = _props9.stroke;\n      var _state3 = this.state,\n        startX = _state3.startX,\n        endX = _state3.endX;\n      var offset = 5;\n      var style = {\n        pointerEvents: 'none',\n        fill: stroke\n      };\n      return React.createElement(Layer, {\n        className: 'recharts-brush-texts'\n      }, React.createElement(Text, {\n        textAnchor: 'end',\n        verticalAnchor: 'middle',\n        style: style,\n        x: Math.min(startX, endX) - offset,\n        y: y + height / 2\n      }, this.getTextOfTick(startIndex)), React.createElement(Text, {\n        textAnchor: 'start',\n        verticalAnchor: 'middle',\n        style: style,\n        x: Math.max(startX, endX) + travellerWidth + offset,\n        y: y + height / 2\n      }, this.getTextOfTick(endIndex)));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props10 = this.props,\n        data = _props10.data,\n        className = _props10.className,\n        children = _props10.children;\n      var _state4 = this.state,\n        startX = _state4.startX,\n        endX = _state4.endX,\n        isTextActive = _state4.isTextActive,\n        isSlideMoving = _state4.isSlideMoving,\n        isTravellerMoving = _state4.isTravellerMoving;\n      if (!data || !data.length) {\n        return null;\n      }\n      var layerClass = classNames('recharts-brush', className);\n      var isPanoramic = React.Children.count(children) === 1;\n      return React.createElement(Layer, {\n        className: layerClass,\n        onMouseMove: this.handleDrag,\n        onMouseLeave: this.handleLeaveWrapper,\n        onMouseUp: this.handleDragEnd,\n        onTouchEnd: this.handleDragEnd,\n        onTouchMove: this.handleTouchMove\n      }, this.renderBackground(), isPanoramic && this.renderPanorama(), this.renderSlide(startX, endX), this.renderTraveller(startX, 'startX'), this.renderTraveller(endX, 'endX'), (isTextActive || isSlideMoving || isTravellerMoving) && this.renderText());\n    }\n  }]);\n  return Brush;\n}(Component), _class2.displayName = 'Brush', _class2.propTypes = {\n  className: PropTypes.string,\n  fill: PropTypes.string,\n  stroke: PropTypes.string,\n  x: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  travellerWidth: PropTypes.number,\n  padding: PropTypes.shape({\n    top: PropTypes.number,\n    right: PropTypes.number,\n    bottom: PropTypes.number,\n    left: PropTypes.number\n  }),\n  dataKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.func]),\n  data: PropTypes.array,\n  startIndex: PropTypes.number,\n  endIndex: PropTypes.number,\n  tickFormatter: PropTypes.func,\n  children: PropTypes.node,\n  onChange: PropTypes.func,\n  updateId: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n}, _class2.defaultProps = {\n  x: 0,\n  y: 0,\n  width: 0,\n  height: 40,\n  travellerWidth: 5,\n  fill: '#fff',\n  stroke: '#666',\n  padding: {\n    top: 1,\n    right: 1,\n    bottom: 1,\n    left: 1\n  }\n}, _temp)) || _class;\nexport default Brush;","map":null,"metadata":{},"sourceType":"module"}