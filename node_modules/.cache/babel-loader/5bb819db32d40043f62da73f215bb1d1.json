{"ast":null,"code":"import _debounce from 'lodash/debounce';\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _class, _temp;\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * @fileOverview Wrapper component to make charts adapt to the size of parent * DOM\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactResizeDetector from 'react-resize-detector';\nimport { isPercent } from '../util/DataUtils';\nimport { warn } from '../util/LogUtils';\nvar ResponsiveContainer = (_temp = _class = function (_Component) {\n  _inherits(ResponsiveContainer, _Component);\n  function ResponsiveContainer(props) {\n    _classCallCheck(this, ResponsiveContainer);\n    var _this = _possibleConstructorReturn(this, (ResponsiveContainer.__proto__ || Object.getPrototypeOf(ResponsiveContainer)).call(this, props));\n    _this.updateDimensionsImmediate = function () {\n      if (!_this.mounted) {\n        return;\n      }\n      var newSize = _this.getContainerSize();\n      if (newSize) {\n        var _this$state = _this.state,\n          oldWidth = _this$state.containerWidth,\n          oldHeight = _this$state.containerHeight;\n        var containerWidth = newSize.containerWidth,\n          containerHeight = newSize.containerHeight;\n        if (containerWidth !== oldWidth || containerHeight !== oldHeight) {\n          _this.setState({\n            containerWidth: containerWidth,\n            containerHeight: containerHeight\n          });\n        }\n      }\n    };\n    _this.state = {\n      containerWidth: -1,\n      containerHeight: -1\n    };\n    _this.handleResize = props.debounce > 0 ? _debounce(_this.updateDimensionsImmediate, props.debounce) : _this.updateDimensionsImmediate;\n    return _this;\n  }\n\n  /* eslint-disable  react/no-did-mount-set-state */\n\n  _createClass(ResponsiveContainer, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.mounted = true;\n      var size = this.getContainerSize();\n      if (size) {\n        this.setState(size);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.mounted = false;\n    }\n  }, {\n    key: 'getContainerSize',\n    value: function getContainerSize() {\n      if (!this.container) {\n        return null;\n      }\n      return {\n        containerWidth: this.container.clientWidth,\n        containerHeight: this.container.clientHeight\n      };\n    }\n  }, {\n    key: 'renderChart',\n    value: function renderChart() {\n      var _state = this.state,\n        containerWidth = _state.containerWidth,\n        containerHeight = _state.containerHeight;\n      if (containerWidth < 0 || containerHeight < 0) {\n        return null;\n      }\n      var _props = this.props,\n        aspect = _props.aspect,\n        width = _props.width,\n        height = _props.height,\n        minWidth = _props.minWidth,\n        minHeight = _props.minHeight,\n        maxHeight = _props.maxHeight,\n        children = _props.children;\n      warn(isPercent(width) || isPercent(height), 'The width(%s) and height(%s) are both fixed numbers,\\n       maybe you don\\'t need to use a ResponsiveContainer.', width, height);\n      warn(!aspect || aspect > 0, 'The aspect(%s) must be greater than zero.', aspect);\n      var calculatedWidth = isPercent(width) ? containerWidth : width;\n      var calculatedHeight = isPercent(height) ? containerHeight : height;\n      if (aspect && aspect > 0) {\n        // Preserve the desired aspect ratio\n        calculatedHeight = calculatedWidth / aspect;\n        // if maxHeight is set, overwrite if calculatedHeight is greater than maxHeight\n        if (maxHeight && calculatedHeight > maxHeight) {\n          calculatedHeight = maxHeight;\n        }\n      }\n      warn(calculatedWidth > 0 && calculatedHeight > 0, 'The width(%s) and height(%s) of chart should be greater than 0,\\n       please check the style of container, or the props width(%s) and height(%s),\\n       or add a minWidth(%s) or minHeight(%s) or use aspect(%s) to control the\\n       height and width.', calculatedWidth, calculatedHeight, width, height, minWidth, minHeight, aspect);\n      return React.cloneElement(children, {\n        width: calculatedWidth,\n        height: calculatedHeight\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n      var _props2 = this.props,\n        minWidth = _props2.minWidth,\n        minHeight = _props2.minHeight,\n        width = _props2.width,\n        height = _props2.height,\n        maxHeight = _props2.maxHeight;\n      var style = {\n        width: width,\n        height: height,\n        minWidth: minWidth,\n        minHeight: minHeight,\n        maxHeight: maxHeight\n      };\n      return React.createElement('div', {\n        className: 'recharts-responsive-container',\n        style: style,\n        ref: function ref(node) {\n          _this2.container = node;\n        }\n      }, this.renderChart(), React.createElement(ReactResizeDetector, {\n        handleWidth: true,\n        handleHeight: true,\n        onResize: this.handleResize\n      }));\n    }\n  }]);\n  return ResponsiveContainer;\n}(Component), _class.displayName = 'ResponsiveContainer', _class.propTypes = {\n  aspect: PropTypes.number,\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  minHeight: PropTypes.number,\n  minWidth: PropTypes.number,\n  maxHeight: PropTypes.number,\n  children: PropTypes.node.isRequired,\n  debounce: PropTypes.number\n}, _class.defaultProps = {\n  width: '100%',\n  height: '100%',\n  debounce: 0\n}, _temp);\nexport default ResponsiveContainer;","map":null,"metadata":{},"sourceType":"module"}