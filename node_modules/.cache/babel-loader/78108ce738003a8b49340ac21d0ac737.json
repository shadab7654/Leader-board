{"ast":null,"code":"import _isFunction from 'lodash/isFunction';\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _class, _class2, _temp2;\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * @fileOverview Render a group of scatters\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Animate from 'react-smooth';\nimport classNames from 'classnames';\nimport pureRender from '../util/PureRender';\nimport Layer from '../container/Layer';\nimport { PRESENTATION_ATTRIBUTES, EVENT_ATTRIBUTES, LEGEND_TYPES, getPresentationAttributes, filterEventsOfChild, isSsr, findAllByType } from '../util/ReactUtils';\nimport Curve from '../shape/Curve';\nimport Symbols from '../shape/Symbols';\nimport ErrorBar from './ErrorBar';\nimport { getValueByDataKey, uniqueId } from '../util/DataUtils';\nimport AnimationDecorator from '../util/AnimationDecorator';\nvar Scatter = AnimationDecorator(_class = pureRender(_class = (_temp2 = _class2 = function (_Component) {\n  _inherits(Scatter, _Component);\n  function Scatter() {\n    var _ref;\n    var _temp, _this, _ret;\n    _classCallCheck(this, Scatter);\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Scatter.__proto__ || Object.getPrototypeOf(Scatter)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      activeIndex: -1,\n      isAnimationFinished: false\n    }, _this.id = uniqueId('recharts-scatter-'), _temp), _possibleConstructorReturn(_this, _ret);\n  }\n  _createClass(Scatter, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n      var animationDuration = this.props.animationDuration;\n      window.setTimeout(function () {\n        return _this2.setState({\n          isAnimationFinished: true\n        });\n      }, animationDuration);\n    }\n  }, {\n    key: 'renderSymbolItem',\n    value: function renderSymbolItem(option, props) {\n      var symbol = void 0;\n      if (React.isValidElement(option)) {\n        symbol = React.cloneElement(option, props);\n      } else if (_isFunction(option)) {\n        symbol = option(props);\n      } else {\n        symbol = React.createElement(Symbols, _extends({}, props, {\n          type: option\n        }));\n      }\n      return symbol;\n    }\n  }, {\n    key: 'renderSymbols',\n    value: function renderSymbols() {\n      var _this3 = this;\n      var _props = this.props,\n        points = _props.points,\n        shape = _props.shape,\n        activeShape = _props.activeShape,\n        activeIndex = _props.activeIndex,\n        animationBegin = _props.animationBegin,\n        animationDuration = _props.animationDuration,\n        isAnimationActive = _props.isAnimationActive,\n        animationEasing = _props.animationEasing,\n        animationId = _props.animationId;\n      var baseProps = getPresentationAttributes(this.props);\n      return points.map(function (entry, i) {\n        var props = _extends({\n          key: 'symbol-' + i\n        }, baseProps, entry);\n        return React.createElement(Layer, _extends({\n          className: 'recharts-scatter-symbol'\n        }, filterEventsOfChild(_this3.props, entry, i), {\n          key: 'symbol-' + i\n        }), React.createElement(Animate, {\n          from: {\n            size: 0\n          },\n          to: {\n            size: props.size\n          },\n          duration: animationDuration,\n          begin: animationBegin,\n          isActive: isAnimationActive,\n          key: animationId,\n          easing: animationEasing\n        }, function (_ref2) {\n          var size = _ref2.size;\n          var finalProps = _extends({}, props, {\n            size: size\n          });\n          return _this3.renderSymbolItem(activeIndex === i ? activeShape : shape, finalProps);\n        }));\n      });\n    }\n  }, {\n    key: 'renderErrorBar',\n    value: function renderErrorBar() {\n      if (!this.state.isAnimationFinished) {\n        return null;\n      }\n      var _props2 = this.props,\n        points = _props2.points,\n        xAxis = _props2.xAxis,\n        yAxis = _props2.yAxis,\n        children = _props2.children;\n      var errorBarItems = findAllByType(children, ErrorBar);\n      if (!errorBarItems) {\n        return null;\n      }\n      function dataPointFormatterY(dataPoint, dataKey) {\n        return {\n          x: dataPoint.cx,\n          y: dataPoint.cy,\n          value: dataPoint.y,\n          errorVal: getValueByDataKey(dataPoint, dataKey)\n        };\n      }\n      function dataPointFormatterX(dataPoint, dataKey) {\n        return {\n          x: dataPoint.cx,\n          y: dataPoint.cy,\n          value: dataPoint.x,\n          errorVal: getValueByDataKey(dataPoint, dataKey)\n        };\n      }\n      return errorBarItems.map(function (item, i) {\n        var direction = item.props.direction;\n        return React.cloneElement(item, {\n          key: i,\n          data: points,\n          xAxis: xAxis,\n          yAxis: yAxis,\n          layout: direction === 'x' ? 'vertical' : 'horizontal',\n          dataPointFormatter: direction === 'x' ? dataPointFormatterX : dataPointFormatterY\n        });\n      });\n    }\n  }, {\n    key: 'renderLine',\n    value: function renderLine() {\n      var _props3 = this.props,\n        points = _props3.points,\n        line = _props3.line,\n        lineType = _props3.lineType,\n        lineJointType = _props3.lineJointType;\n      var scatterProps = getPresentationAttributes(this.props);\n      var customLineProps = getPresentationAttributes(line);\n      var linePoints = void 0,\n        lineItem = void 0;\n      if (lineType === 'joint') {\n        linePoints = points.map(function (entry) {\n          return {\n            x: entry.cx,\n            y: entry.cy\n          };\n        });\n      }\n      var lineProps = _extends({}, scatterProps, {\n        fill: 'none',\n        stroke: scatterProps && scatterProps.fill\n      }, customLineProps, {\n        points: linePoints\n      });\n      if (React.isValidElement(line)) {\n        lineItem = React.cloneElement(line, lineProps);\n      } else if (_isFunction(line)) {\n        lineItem = line(lineProps);\n      } else {\n        lineItem = React.createElement(Curve, _extends({}, lineProps, {\n          type: lineJointType\n        }));\n      }\n      return React.createElement(Layer, {\n        className: 'recharts-scatter-line',\n        key: 'recharts-scatter-line'\n      }, lineItem);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props4 = this.props,\n        points = _props4.points,\n        line = _props4.line,\n        className = _props4.className,\n        xAxis = _props4.xAxis,\n        yAxis = _props4.yAxis,\n        left = _props4.left,\n        top = _props4.top,\n        width = _props4.width,\n        height = _props4.height;\n      if (!points || !points.length) {\n        return null;\n      }\n      var layerClass = classNames('recharts-scatter', className);\n      var needClip = xAxis && xAxis.allowDataOverflow || yAxis && yAxis.allowDataOverflow;\n      return React.createElement(Layer, {\n        className: layerClass,\n        clipPath: needClip ? 'url(#clipPath-' + this.id + ')' : null\n      }, needClip ? React.createElement('defs', null, React.createElement('clipPath', {\n        id: 'clipPath-' + this.id\n      }, React.createElement('rect', {\n        x: left,\n        y: top,\n        width: width,\n        height: height\n      }))) : null, line && this.renderLine(), this.renderErrorBar(), React.createElement(Layer, {\n        key: 'recharts-scatter-symbols'\n      }, this.renderSymbols()));\n    }\n  }]);\n  return Scatter;\n}(Component), _class2.displayName = 'Scatter', _class2.propTypes = _extends({}, EVENT_ATTRIBUTES, PRESENTATION_ATTRIBUTES, {\n  xAxisId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  yAxisId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  zAxisId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  line: PropTypes.oneOfType([PropTypes.bool, PropTypes.object, PropTypes.func, PropTypes.element]),\n  lineType: PropTypes.oneOf(['fitting', 'joint']),\n  lineJointType: PropTypes.oneOfType([PropTypes.oneOf(['basis', 'basisClosed', 'basisOpen', 'linear', 'linearClosed', 'natural', 'monotoneX', 'monotoneY', 'monotone', 'step', 'stepBefore', 'stepAfter']), PropTypes.func]),\n  legendType: PropTypes.oneOf(LEGEND_TYPES),\n  className: PropTypes.string,\n  activeIndex: PropTypes.number,\n  activeShape: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.element]),\n  shape: PropTypes.oneOfType([PropTypes.oneOf(['circle', 'cross', 'diamond', 'square', 'star', 'triangle', 'wye']), PropTypes.element, PropTypes.func]),\n  points: PropTypes.arrayOf(PropTypes.shape({\n    cx: PropTypes.number,\n    cy: PropTypes.number,\n    size: PropTypes.number,\n    node: PropTypes.shape({\n      x: PropTypes.number,\n      y: PropTypes.number,\n      z: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n    }),\n    payload: PropTypes.any\n  })),\n  isAnimationActive: PropTypes.bool,\n  animationId: PropTypes.number,\n  animationBegin: PropTypes.number,\n  animationDuration: PropTypes.number,\n  animationEasing: PropTypes.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear'])\n}), _class2.defaultProps = {\n  xAxisId: 0,\n  yAxisId: 0,\n  zAxisId: 0,\n  legendType: 'circle',\n  lineType: 'joint',\n  lineJointType: 'linear',\n  data: [],\n  shape: 'circle',\n  isAnimationActive: !isSsr(),\n  animationBegin: 0,\n  animationDuration: 400,\n  animationEasing: 'linear'\n}, _temp2)) || _class) || _class;\nexport default Scatter;","map":null,"metadata":{},"sourceType":"module"}