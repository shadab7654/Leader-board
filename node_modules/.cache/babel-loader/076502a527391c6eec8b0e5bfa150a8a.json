{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _class, _temp;\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * @fileOverview Render a group of error bar\n*/\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Layer from '../container/Layer';\nimport { getPresentationAttributes } from '../util/ReactUtils';\nvar ErrorBar = (_temp = _class = function (_Component) {\n  _inherits(ErrorBar, _Component);\n  function ErrorBar() {\n    _classCallCheck(this, ErrorBar);\n    return _possibleConstructorReturn(this, (ErrorBar.__proto__ || Object.getPrototypeOf(ErrorBar)).apply(this, arguments));\n  }\n  _createClass(ErrorBar, [{\n    key: 'renderErrorBars',\n    value: function renderErrorBars() {\n      var _props = this.props,\n        offset = _props.offset,\n        layout = _props.layout,\n        width = _props.width,\n        dataKey = _props.dataKey,\n        data = _props.data,\n        dataPointFormatter = _props.dataPointFormatter,\n        xAxis = _props.xAxis,\n        yAxis = _props.yAxis,\n        others = _objectWithoutProperties(_props, ['offset', 'layout', 'width', 'dataKey', 'data', 'dataPointFormatter', 'xAxis', 'yAxis']);\n      var props = getPresentationAttributes(others);\n      return data.map(function (entry, i) {\n        var _dataPointFormatter = dataPointFormatter(entry, dataKey),\n          x = _dataPointFormatter.x,\n          y = _dataPointFormatter.y,\n          value = _dataPointFormatter.value,\n          errorVal = _dataPointFormatter.errorVal;\n        if (!errorVal) {\n          return null;\n        }\n        var xMid = void 0,\n          yMid = void 0,\n          xMin = void 0,\n          yMin = void 0,\n          xMax = void 0,\n          yMax = void 0,\n          scale = void 0,\n          coordsTop = void 0,\n          coordsMid = void 0,\n          coordsBot = void 0,\n          lowBound = void 0,\n          highBound = void 0;\n        if (Array.isArray(errorVal)) {\n          lowBound = errorVal[0];\n          highBound = errorVal[1];\n        } else {\n          lowBound = errorVal;\n          highBound = errorVal;\n        }\n        if (layout === 'vertical') {\n          scale = xAxis.scale;\n          xMid = value;\n          yMid = y + offset;\n          xMin = scale(xMid - lowBound);\n          yMin = yMid + width;\n          xMax = scale(xMid + highBound);\n          yMax = yMid - width;\n          coordsTop = {\n            x1: xMax,\n            y1: yMin,\n            x2: xMax,\n            y2: yMax\n          };\n          coordsMid = {\n            x1: xMin,\n            y1: yMid,\n            x2: xMax,\n            y2: yMid\n          };\n          coordsBot = {\n            x1: xMin,\n            y1: yMin,\n            x2: xMin,\n            y2: yMax\n          };\n        } else if (layout === 'horizontal') {\n          scale = yAxis.scale;\n          xMid = x + offset;\n          yMid = value;\n          xMin = xMid - width;\n          xMax = xMid + width;\n          yMin = scale(yMid - lowBound);\n          yMax = scale(yMid + highBound);\n          coordsTop = {\n            x1: xMin,\n            y1: yMax,\n            x2: xMax,\n            y2: yMax\n          };\n          coordsMid = {\n            x1: xMid,\n            y1: yMin,\n            x2: xMid,\n            y2: yMax\n          };\n          coordsBot = {\n            x1: xMin,\n            y1: yMin,\n            x2: xMax,\n            y2: yMin\n          };\n        }\n        return React.createElement(Layer, _extends({\n          className: 'recharts-errorBar',\n          key: i\n        }, props), React.createElement('line', coordsTop), ';', React.createElement('line', coordsMid), ';', React.createElement('line', coordsBot), ';');\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.createElement(Layer, {\n        className: 'recharts-errorBars'\n      }, this.renderErrorBars());\n    }\n  }]);\n  return ErrorBar;\n}(Component), _class.propTypes = {\n  dataKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.func]).isRequired,\n  data: PropTypes.array,\n  xAxis: PropTypes.object,\n  yAxis: PropTypes.object,\n  layout: PropTypes.string,\n  dataPointFormatter: PropTypes.func,\n  stroke: PropTypes.string,\n  strokeWidth: PropTypes.number,\n  width: PropTypes.number,\n  offset: PropTypes.number\n}, _class.defaultProps = {\n  stroke: 'black',\n  strokeWidth: 1.5,\n  width: 5,\n  offset: 0,\n  layout: 'horizontal'\n}, _temp);\nexport default ErrorBar;","map":null,"metadata":{},"sourceType":"module"}