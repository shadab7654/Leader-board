{"ast":null,"code":"import _isFunction from 'lodash/isFunction';\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _class, _temp;\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * @fileOverview Cartesian Axis\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { shallowEqual } from '../util/PureRender';\nimport { getStringSize } from '../util/DOMUtils';\nimport Layer from '../container/Layer';\nimport Text from '../component/Text';\nimport { isSsr, PRESENTATION_ATTRIBUTES, EVENT_ATTRIBUTES, getPresentationAttributes, filterEventsOfChild } from '../util/ReactUtils';\nimport { isNumber, isNumOrStr, mathSign } from '../util/DataUtils';\nvar CartesianAxis = (_temp = _class = function (_Component) {\n  _inherits(CartesianAxis, _Component);\n  function CartesianAxis() {\n    _classCallCheck(this, CartesianAxis);\n    return _possibleConstructorReturn(this, (CartesianAxis.__proto__ || Object.getPrototypeOf(CartesianAxis)).apply(this, arguments));\n  }\n  _createClass(CartesianAxis, [{\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(_ref, state) {\n      var viewBox = _ref.viewBox,\n        restProps = _objectWithoutProperties(_ref, ['viewBox']);\n\n      // props.viewBox is sometimes generated every time -\n      // check that specially as object equality is likely to fail\n      var _props = this.props,\n        viewBoxOld = _props.viewBox,\n        restPropsOld = _objectWithoutProperties(_props, ['viewBox']);\n      return !shallowEqual(viewBox, viewBoxOld) || !shallowEqual(restProps, restPropsOld) || !shallowEqual(state, this.state);\n    }\n\n    /**\n     * Calculate the coordinates of endpoints in ticks\n     * @param  {Object} data The data of a simple tick\n     * @return {Object} (x1, y1): The coordinate of endpoint close to tick text\n     *  (x2, y2): The coordinate of endpoint close to axis\n     */\n  }, {\n    key: 'getTickLineCoord',\n    value: function getTickLineCoord(data) {\n      var _props2 = this.props,\n        x = _props2.x,\n        y = _props2.y,\n        width = _props2.width,\n        height = _props2.height,\n        orientation = _props2.orientation,\n        tickSize = _props2.tickSize,\n        mirror = _props2.mirror;\n      var x1 = void 0,\n        x2 = void 0,\n        y1 = void 0,\n        y2 = void 0,\n        tx = void 0,\n        ty = void 0;\n      var sign = mirror ? -1 : 1;\n      var finalTickSize = data.tickSize || tickSize;\n      var tickCoord = isNumber(data.tickCoord) ? data.tickCoord : data.coordinate;\n      switch (orientation) {\n        case 'top':\n          x1 = x2 = data.coordinate;\n          y2 = y + !mirror * height;\n          y1 = ty = y2 - sign * finalTickSize;\n          tx = tickCoord;\n          break;\n        case 'left':\n          y1 = y2 = data.coordinate;\n          x2 = x + !mirror * width;\n          x1 = tx = x2 - sign * finalTickSize;\n          ty = tickCoord;\n          break;\n        case 'right':\n          y1 = y2 = data.coordinate;\n          x2 = x + mirror * width;\n          x1 = tx = x2 + sign * finalTickSize;\n          ty = tickCoord;\n          break;\n        default:\n          x1 = x2 = data.coordinate;\n          y2 = y + mirror * height;\n          y1 = ty = y2 + sign * finalTickSize;\n          tx = tickCoord;\n          break;\n      }\n      return {\n        line: {\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2\n        },\n        tick: {\n          x: tx,\n          y: ty\n        }\n      };\n    }\n  }, {\n    key: 'getTickTextAnchor',\n    value: function getTickTextAnchor() {\n      var _props3 = this.props,\n        orientation = _props3.orientation,\n        mirror = _props3.mirror;\n      var textAnchor = void 0;\n      switch (orientation) {\n        case 'left':\n          textAnchor = mirror ? 'start' : 'end';\n          break;\n        case 'right':\n          textAnchor = mirror ? 'end' : 'start';\n          break;\n        default:\n          textAnchor = 'middle';\n          break;\n      }\n      return textAnchor;\n    }\n  }, {\n    key: 'getTickVerticalAnchor',\n    value: function getTickVerticalAnchor() {\n      var _props4 = this.props,\n        orientation = _props4.orientation,\n        mirror = _props4.mirror;\n      var verticalAnchor = 'end';\n      switch (orientation) {\n        case 'left':\n        case 'right':\n          verticalAnchor = 'middle';\n          break;\n        case 'top':\n          verticalAnchor = mirror ? 'start' : 'end';\n          break;\n        default:\n          verticalAnchor = mirror ? 'end' : 'start';\n          break;\n      }\n      return verticalAnchor;\n    }\n  }, {\n    key: 'getLabelProps',\n    value: function getLabelProps() {\n      var _props5 = this.props,\n        x = _props5.x,\n        y = _props5.y,\n        width = _props5.width,\n        height = _props5.height,\n        orientation = _props5.orientation;\n      switch (orientation) {\n        case 'left':\n          return {\n            x: x + width,\n            y: y - 6,\n            textAnchor: 'middle'\n          };\n        case 'right':\n          return {\n            x: x,\n            y: y - 6,\n            textAnchor: 'middle'\n          };\n        case 'top':\n          return {\n            x: x + width + 6,\n            y: y + height + 6,\n            textAnchor: 'start'\n          };\n        default:\n          return {\n            x: x + width + 6,\n            y: y + 6,\n            textAnchor: 'start'\n          };\n      }\n    }\n  }, {\n    key: 'renderAxisLine',\n    value: function renderAxisLine() {\n      var _props6 = this.props,\n        x = _props6.x,\n        y = _props6.y,\n        width = _props6.width,\n        height = _props6.height,\n        orientation = _props6.orientation,\n        axisLine = _props6.axisLine,\n        mirror = _props6.mirror;\n      var props = _extends({}, getPresentationAttributes(this.props), {\n        fill: 'none'\n      }, getPresentationAttributes(axisLine));\n      if (orientation === 'top' || orientation === 'bottom') {\n        var needHeight = orientation === 'top' && !mirror || orientation === 'bottom' && mirror;\n        props = _extends({}, props, {\n          x1: x,\n          y1: y + needHeight * height,\n          x2: x + width,\n          y2: y + needHeight * height\n        });\n      } else {\n        var needWidth = orientation === 'left' && !mirror || orientation === 'right' && mirror;\n        props = _extends({}, props, {\n          x1: x + needWidth * width,\n          y1: y,\n          x2: x + needWidth * width,\n          y2: y + height\n        });\n      }\n      return React.createElement('line', _extends({\n        className: 'recharts-cartesian-axis-line'\n      }, props));\n    }\n  }, {\n    key: 'renderTickItem',\n    value: function renderTickItem(option, props, value) {\n      var tickItem = void 0;\n      if (React.isValidElement(option)) {\n        tickItem = React.cloneElement(option, props);\n      } else if (_isFunction(option)) {\n        tickItem = option(props);\n      } else {\n        tickItem = React.createElement(Text, _extends({}, props, {\n          className: 'recharts-cartesian-axis-tick-value'\n        }), value);\n      }\n      return tickItem;\n    }\n\n    /**\n     * render the ticks\n     * @param {Array} ticks The ticks to actually render (overrides what was passed in props)\n     * @return {ReactComponent} renderedTicks\n     */\n  }, {\n    key: 'renderTicks',\n    value: function renderTicks(ticks) {\n      var _this2 = this;\n      var _props7 = this.props,\n        tickLine = _props7.tickLine,\n        stroke = _props7.stroke,\n        tick = _props7.tick,\n        tickFormatter = _props7.tickFormatter;\n      var finalTicks = CartesianAxis.getTicks(_extends({}, this.props, {\n        ticks: ticks\n      }));\n      var textAnchor = this.getTickTextAnchor();\n      var verticalAnchor = this.getTickVerticalAnchor();\n      var axisProps = getPresentationAttributes(this.props);\n      var customTickProps = getPresentationAttributes(tick);\n      var tickLineProps = _extends({}, axisProps, {\n        fill: 'none'\n      }, getPresentationAttributes(tickLine));\n      var items = finalTicks.map(function (entry, i) {\n        var _getTickLineCoord = _this2.getTickLineCoord(entry),\n          lineCoord = _getTickLineCoord.line,\n          tickCoord = _getTickLineCoord.tick;\n        var tickProps = _extends({\n          textAnchor: textAnchor,\n          verticalAnchor: verticalAnchor\n        }, axisProps, {\n          stroke: 'none',\n          fill: stroke\n        }, customTickProps, tickCoord, {\n          index: i,\n          payload: entry\n        });\n        return React.createElement(Layer, _extends({\n          className: 'recharts-cartesian-axis-tick',\n          key: 'tick-' + i\n        }, filterEventsOfChild(_this2.props, entry, i)), tickLine && React.createElement('line', _extends({\n          className: 'recharts-cartesian-axis-tick-line'\n        }, tickLineProps, lineCoord)), tick && _this2.renderTickItem(tick, tickProps, _isFunction(tickFormatter) ? tickFormatter(entry.value) : entry.value));\n      });\n      return React.createElement('g', {\n        className: 'recharts-cartesian-axis-ticks'\n      }, items);\n    }\n  }, {\n    key: 'renderLabel',\n    value: function renderLabel() {\n      var _props8 = this.props,\n        label = _props8.label,\n        stroke = _props8.stroke,\n        orientation = _props8.orientation,\n        viewBox = _props8.viewBox;\n      var presentation = getPresentationAttributes(this.props);\n      if (React.isValidElement(label)) {\n        return React.cloneElement(label, _extends({}, presentation, {\n          orientation: orientation,\n          viewBox: viewBox\n        }));\n      } else if (_isFunction(label)) {\n        return label(this.props);\n      } else if (isNumOrStr(label)) {\n        var props = _extends({}, presentation, {\n          stroke: 'none',\n          fill: stroke\n        }, this.getLabelProps());\n        return React.createElement('g', {\n          className: 'recharts-cartesian-axis-label'\n        }, React.createElement(Text, props, label));\n      }\n      return null;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props9 = this.props,\n        axisLine = _props9.axisLine,\n        width = _props9.width,\n        height = _props9.height,\n        ticksGenerator = _props9.ticksGenerator;\n      var _props10 = this.props,\n        ticks = _props10.ticks,\n        noTicksProps = _objectWithoutProperties(_props10, ['ticks']);\n      var finalTicks = ticks;\n      if (_isFunction(ticksGenerator)) {\n        finalTicks = ticks && ticks.length > 0 ? ticksGenerator(this.props) : ticksGenerator(noTicksProps);\n      }\n      if (width <= 0 || height <= 0 || !finalTicks || !finalTicks.length) {\n        return null;\n      }\n      return React.createElement(Layer, {\n        className: 'recharts-cartesian-axis'\n      }, axisLine && this.renderAxisLine(), this.renderTicks(finalTicks), this.renderLabel());\n    }\n  }], [{\n    key: 'getTicks',\n    value: function getTicks(props) {\n      var ticks = props.ticks,\n        viewBox = props.viewBox,\n        minTickGap = props.minTickGap,\n        orientation = props.orientation,\n        interval = props.interval,\n        tickFormatter = props.tickFormatter;\n      if (!ticks || !ticks.length) {\n        return [];\n      }\n      if (isNumber(interval) || isSsr()) {\n        return CartesianAxis.getNumberIntervalTicks(ticks, isNumber(interval) ? interval : 0);\n      }\n      if (interval === 'preserveStartEnd') {\n        return CartesianAxis.getTicksStart({\n          ticks: ticks,\n          tickFormatter: tickFormatter,\n          viewBox: viewBox,\n          orientation: orientation,\n          minTickGap: minTickGap\n        }, true);\n      } else if (interval === 'preserveStart') {\n        return CartesianAxis.getTicksStart({\n          ticks: ticks,\n          tickFormatter: tickFormatter,\n          viewBox: viewBox,\n          orientation: orientation,\n          minTickGap: minTickGap\n        });\n      }\n      return CartesianAxis.getTicksEnd({\n        ticks: ticks,\n        tickFormatter: tickFormatter,\n        viewBox: viewBox,\n        orientation: orientation,\n        minTickGap: minTickGap\n      });\n    }\n  }, {\n    key: 'getNumberIntervalTicks',\n    value: function getNumberIntervalTicks(ticks, interval) {\n      return ticks.filter(function (entry, i) {\n        return i % (interval + 1) === 0;\n      });\n    }\n  }, {\n    key: 'getTicksStart',\n    value: function getTicksStart(_ref2, preserveEnd) {\n      var ticks = _ref2.ticks,\n        tickFormatter = _ref2.tickFormatter,\n        viewBox = _ref2.viewBox,\n        orientation = _ref2.orientation,\n        minTickGap = _ref2.minTickGap;\n      var x = viewBox.x,\n        y = viewBox.y,\n        width = viewBox.width,\n        height = viewBox.height;\n      var sizeKey = orientation === 'top' || orientation === 'bottom' ? 'width' : 'height';\n      var result = (ticks || []).slice();\n      var len = result.length;\n      var sign = len >= 2 ? mathSign(result[1].coordinate - result[0].coordinate) : 1;\n      var start = void 0,\n        end = void 0;\n      if (sign === 1) {\n        start = sizeKey === 'width' ? x : y;\n        end = sizeKey === 'width' ? x + width : y + height;\n      } else {\n        start = sizeKey === 'width' ? x + width : y + height;\n        end = sizeKey === 'width' ? x : y;\n      }\n      if (preserveEnd) {\n        // Try to guarantee the tail to be displayed\n        var tail = ticks[len - 1];\n        var tailContent = _isFunction(tickFormatter) ? tickFormatter(tail.value) : tail.value;\n        var tailSize = getStringSize(tailContent)[sizeKey];\n        var tailGap = sign * (tail.coordinate + sign * tailSize / 2 - end);\n        result[len - 1] = tail = _extends({}, tail, {\n          tickCoord: tailGap > 0 ? tail.coordinate - tailGap * sign : tail.coordinate\n        });\n        var isTailShow = sign * (tail.tickCoord - sign * tailSize / 2 - start) >= 0 && sign * (tail.tickCoord + sign * tailSize / 2 - end) <= 0;\n        if (isTailShow) {\n          end = tail.tickCoord - sign * (tailSize / 2 + minTickGap);\n          result[len - 1] = _extends({}, tail, {\n            isShow: true\n          });\n        }\n      }\n      var count = preserveEnd ? len - 1 : len;\n      for (var i = 0; i < count; i++) {\n        var entry = result[i];\n        var content = _isFunction(tickFormatter) ? tickFormatter(entry.value) : entry.value;\n        var size = getStringSize(content)[sizeKey];\n        if (i === 0) {\n          var gap = sign * (entry.coordinate - sign * size / 2 - start);\n          result[i] = entry = _extends({}, entry, {\n            tickCoord: gap < 0 ? entry.coordinate - gap * sign : entry.coordinate\n          });\n        } else {\n          result[i] = entry = _extends({}, entry, {\n            tickCoord: entry.coordinate\n          });\n        }\n        var isShow = sign * (entry.tickCoord - sign * size / 2 - start) >= 0 && sign * (entry.tickCoord + sign * size / 2 - end) <= 0;\n        if (isShow) {\n          start = entry.tickCoord + sign * (size / 2 + minTickGap);\n          result[i] = _extends({}, entry, {\n            isShow: true\n          });\n        }\n      }\n      return result.filter(function (entry) {\n        return entry.isShow;\n      });\n    }\n  }, {\n    key: 'getTicksEnd',\n    value: function getTicksEnd(_ref3) {\n      var ticks = _ref3.ticks,\n        tickFormatter = _ref3.tickFormatter,\n        viewBox = _ref3.viewBox,\n        orientation = _ref3.orientation,\n        minTickGap = _ref3.minTickGap;\n      var x = viewBox.x,\n        y = viewBox.y,\n        width = viewBox.width,\n        height = viewBox.height;\n      var sizeKey = orientation === 'top' || orientation === 'bottom' ? 'width' : 'height';\n      var result = (ticks || []).slice();\n      var len = result.length;\n      var sign = len >= 2 ? mathSign(result[1].coordinate - result[0].coordinate) : 1;\n      var start = void 0,\n        end = void 0;\n      if (sign === 1) {\n        start = sizeKey === 'width' ? x : y;\n        end = sizeKey === 'width' ? x + width : y + height;\n      } else {\n        start = sizeKey === 'width' ? x + width : y + height;\n        end = sizeKey === 'width' ? x : y;\n      }\n      for (var i = len - 1; i >= 0; i--) {\n        var entry = result[i];\n        var content = _isFunction(tickFormatter) ? tickFormatter(entry.value) : entry.value;\n        var size = getStringSize(content)[sizeKey];\n        if (i === len - 1) {\n          var gap = sign * (entry.coordinate + sign * size / 2 - end);\n          result[i] = entry = _extends({}, entry, {\n            tickCoord: gap > 0 ? entry.coordinate - gap * sign : entry.coordinate\n          });\n        } else {\n          result[i] = entry = _extends({}, entry, {\n            tickCoord: entry.coordinate\n          });\n        }\n        var isShow = sign * (entry.tickCoord - sign * size / 2 - start) >= 0 && sign * (entry.tickCoord + sign * size / 2 - end) <= 0;\n        if (isShow) {\n          end = entry.tickCoord - sign * (size / 2 + minTickGap);\n          result[i] = _extends({}, entry, {\n            isShow: true\n          });\n        }\n      }\n      return result.filter(function (entry) {\n        return entry.isShow;\n      });\n    }\n  }]);\n  return CartesianAxis;\n}(Component), _class.displayName = 'CartesianAxis', _class.propTypes = _extends({}, PRESENTATION_ATTRIBUTES, EVENT_ATTRIBUTES, {\n  x: PropTypes.number,\n  y: PropTypes.number,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  orientation: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\n  // The viewBox of svg\n  viewBox: PropTypes.shape({\n    x: PropTypes.number,\n    y: PropTypes.number,\n    width: PropTypes.number,\n    height: PropTypes.number\n  }),\n  label: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.func, PropTypes.element]),\n  tick: PropTypes.oneOfType([PropTypes.bool, PropTypes.func, PropTypes.object, PropTypes.element]),\n  axisLine: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  tickLine: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  mirror: PropTypes.bool,\n  minTickGap: PropTypes.number,\n  ticks: PropTypes.array,\n  tickSize: PropTypes.number,\n  stroke: PropTypes.string,\n  tickFormatter: PropTypes.func,\n  ticksGenerator: PropTypes.func,\n  interval: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['preserveStart', 'preserveEnd', 'preserveStartEnd'])])\n}), _class.defaultProps = {\n  x: 0,\n  y: 0,\n  width: 0,\n  height: 0,\n  viewBox: {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  },\n  // The orientation of axis\n  orientation: 'bottom',\n  // The ticks\n  ticks: [],\n  stroke: '#666',\n  tickLine: true,\n  axisLine: true,\n  tick: true,\n  mirror: false,\n  minTickGap: 5,\n  // The width or height of tick\n  tickSize: 6,\n  interval: 'preserveEnd'\n}, _temp);\nexport default CartesianAxis;","map":null,"metadata":{},"sourceType":"module"}